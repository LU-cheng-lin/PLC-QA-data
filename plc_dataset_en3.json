[
    {
        "question": "Please use the FX-series PLC instruction list to design traffic light control logic for a one-way road. The red, green, and yellow lights switch in sequence. Assume that pressing X0 starts the system and there is a stop button X1. The timing parameters are: green light 10.0 seconds, green light blinking 2 seconds, yellow light 4.0 seconds, red light 24.0 seconds, and the cycle repeats.",
        "answer": "LD X000              // Start button\nOR M0\nANI X001             // Stop button\nOUT M0               // System start flag\n\nLD M0\nANI T3               // Ensure the next timer has not reached\nOUT T0 K100          // T0 = 10.0 seconds (K100 means 10.0 x 100ms)\nANI T0\nOUT M1               // M1 = Green light phase\n\nLD T0\nOUT T1 K20           // T1 = 2 seconds (20 x 100ms)\nANI T1\nOUT M2               // M2 = Green light blinking phase\n\nLD T1\nOUT T2 K40           // T2 = 4.0 seconds (40 x 100ms)\nANI T2\nOUT M3               // M3 = Yellow light phase\n\nLD T2\nOUT T3 K240          // T3 = 24.0 seconds (240 x 100ms)\nOUT M4               // M4 = Red light phase\n\nLD M1\nLD M2\nAND M8013            // Blinking pulse (M8013)\nORB                  // OR B used to combine two logics\nOUT Y000             // Green light output\n\nLD M3\nOUT Y001             // Yellow light output\n\nLD M4\nOUT Y002             // Red light output\n\nEND                  // Program end\n\n"
    },
    {
        "question": "Please use the FX-series PLC instruction list to design traffic light control logic for a one-way road. The red, green, and yellow lights switch in sequence. Assume that pressing X0 starts the system and there is a stop button X1. The timing parameters are: green light 19.0 seconds, green light blinking 2 seconds, yellow light 3.0 seconds, red light 14.0 seconds, and the cycle repeats.",
        "answer": "LD X000              // Start button\nOR M0\nANI X001             // Stop button\nOUT M0               // System start flag\n\nLD M0\nANI T3               // Ensure the next timer has not reached\nOUT T0 K190          // T0 = 19.0 seconds (K190 means 19.0 x 100ms)\nANI T0\nOUT M1               // M1 = Green light phase\n\nLD T0\nOUT T1 K20           // T1 = 2 seconds (20 x 100ms)\nANI T1\nOUT M2               // M2 = Green light blinking phase\n\nLD T1\nOUT T2 K30           // T2 = 3.0 seconds (30 x 100ms)\nANI T2\nOUT M3               // M3 = Yellow light phase\n\nLD T2\nOUT T3 K140          // T3 = 14.0 seconds (140 x 100ms)\nOUT M4               // M4 = Red light phase\n\nLD M1\nLD M2\nAND M8013            // Blinking pulse (M8013)\nORB                  // OR B used to combine two logics\nOUT Y000             // Green light output\n\nLD M3\nOUT Y001             // Yellow light output\n\nLD M4\nOUT Y002             // Red light output\n\nEND                  // Program end\n\n"
    },
    {
        "question": "Please use the FX-series PLC instruction list to design traffic light control logic for a one-way road. The red, green, and yellow lights switch in sequence. Assume that pressing X0 starts the system and there is a stop button X1. The timing parameters are: green light 16.0 seconds, green light blinking 2 seconds, yellow light 4.0 seconds, red light 24.0 seconds, and the cycle repeats.",
        "answer": "LD X000              // Start button\nOR M0\nANI X001             // Stop button\nOUT M0               // System start flag\n\nLD M0\nANI T3               // Ensure the next timer has not reached\nOUT T0 K160          // T0 = 16.0 seconds (K160 means 16.0 x 100ms)\nANI T0\nOUT M1               // M1 = Green light phase\n\nLD T0\nOUT T1 K20           // T1 = 2 seconds (20 x 100ms)\nANI T1\nOUT M2               // M2 = Green light blinking phase\n\nLD T1\nOUT T2 K40           // T2 = 4.0 seconds (40 x 100ms)\nANI T2\nOUT M3               // M3 = Yellow light phase\n\nLD T2\nOUT T3 K240          // T3 = 24.0 seconds (240 x 100ms)\nOUT M4               // M4 = Red light phase\n\nLD M1\nLD M2\nAND M8013            // Blinking pulse (M8013)\nORB                  // OR B used to combine two logics\nOUT Y000             // Green light output\n\nLD M3\nOUT Y001             // Yellow light output\n\nLD M4\nOUT Y002             // Red light output\n\nEND                  // Program end\n\n"
    },
    {
        "question": "Please use the FX-series PLC instruction list to design traffic light control logic for a one-way road. The red, green, and yellow lights switch in sequence. Assume that pressing X0 starts the system and there is a stop button X1. The timing parameters are: green light 8.0 seconds, green light blinking 2 seconds, yellow light 3.0 seconds, red light 23.0 seconds, and the cycle repeats.",
        "answer": "LD X000              // Start button\nOR M0\nANI X001             // Stop button\nOUT M0               // System start flag\n\nLD M0\nANI T3               // Ensure the next timer has not reached\nOUT T0 K80          // T0 = 8.0 seconds (K80 means 8.0 x 100ms)\nANI T0\nOUT M1               // M1 = Green light phase\n\nLD T0\nOUT T1 K20           // T1 = 2 seconds (20 x 100ms)\nANI T1\nOUT M2               // M2 = Green light blinking phase\n\nLD T1\nOUT T2 K30           // T2 = 3.0 seconds (30 x 100ms)\nANI T2\nOUT M3               // M3 = Yellow light phase\n\nLD T2\nOUT T3 K230          // T3 = 23.0 seconds (230 x 100ms)\nOUT M4               // M4 = Red light phase\n\nLD M1\nLD M2\nAND M8013            // Blinking pulse (M8013)\nORB                  // OR B used to combine two logics\nOUT Y000             // Green light output\n\nLD M3\nOUT Y001             // Yellow light output\n\nLD M4\nOUT Y002             // Red light output\n\nEND                  // Program end\n\n"
    },
    {
        "question": "Please use the FX-series PLC instruction list to design traffic light control logic for a one-way road. The red, green, and yellow lights switch in sequence. Assume that pressing X0 starts the system and there is a stop button X1. The timing parameters are: green light 20.0 seconds, green light blinking 2 seconds, yellow light 3.0 seconds, red light 14.0 seconds, and the cycle repeats.",
        "answer": "LD X000              // Start button\nOR M0\nANI X001             // Stop button\nOUT M0               // System start flag\n\nLD M0\nANI T3               // Ensure the next timer has not reached\nOUT T0 K200          // T0 = 20.0 seconds (K200 means 20.0 x 100ms)\nANI T0\nOUT M1               // M1 = Green light phase\n\nLD T0\nOUT T1 K20           // T1 = 2 seconds (20 x 100ms)\nANI T1\nOUT M2               // M2 = Green light blinking phase\n\nLD T1\nOUT T2 K30           // T2 = 3.0 seconds (30 x 100ms)\nANI T2\nOUT M3               // M3 = Yellow light phase\n\nLD T2\nOUT T3 K140          // T3 = 14.0 seconds (140 x 100ms)\nOUT M4               // M4 = Red light phase\n\nLD M1\nLD M2\nAND M8013            // Blinking pulse (M8013)\nORB                  // OR B used to combine two logics\nOUT Y000             // Green light output\n\nLD M3\nOUT Y001             // Yellow light output\n\nLD M4\nOUT Y002             // Red light output\n\nEND                  // Program end\n\n"
    },
    {
        "question": "Please use the FX-series PLC instruction list to design traffic light control logic for a one-way road. The red, green, and yellow lights switch in sequence. Assume that pressing X0 starts the system and there is a stop button X1. The timing parameters are: green light 17.0 seconds, green light blinking 2 seconds, yellow light 4.0 seconds, red light 11.0 seconds, and the cycle repeats.",
        "answer": "LD X000              // Start button\nOR M0\nANI X001             // Stop button\nOUT M0               // System start flag\n\nLD M0\nANI T3               // Ensure the next timer has not reached\nOUT T0 K170          // T0 = 17.0 seconds (K170 means 17.0 x 100ms)\nANI T0\nOUT M1               // M1 = Green light phase\n\nLD T0\nOUT T1 K20           // T1 = 2 seconds (20 x 100ms)\nANI T1\nOUT M2               // M2 = Green light blinking phase\n\nLD T1\nOUT T2 K40           // T2 = 4.0 seconds (40 x 100ms)\nANI T2\nOUT M3               // M3 = Yellow light phase\n\nLD T2\nOUT T3 K110          // T3 = 11.0 seconds (110 x 100ms)\nOUT M4               // M4 = Red light phase\n\nLD M1\nLD M2\nAND M8013            // Blinking pulse (M8013)\nORB                  // OR B used to combine two logics\nOUT Y000             // Green light output\n\nLD M3\nOUT Y001             // Yellow light output\n\nLD M4\nOUT Y002             // Red light output\n\nEND                  // Program end\n\n"
    },
    {
        "question": "Please use the FX-series PLC instruction list to design traffic light control logic for a one-way road. The red, green, and yellow lights switch in sequence. Assume that pressing X0 starts the system and there is a stop button X1. The timing parameters are: green light 15.0 seconds, green light blinking 2 seconds, yellow light 5.0 seconds, red light 28.0 seconds, and the cycle repeats.",
        "answer": "LD X000              // Start button\nOR M0\nANI X001             // Stop button\nOUT M0               // System start flag\n\nLD M0\nANI T3               // Ensure the next timer has not reached\nOUT T0 K150          // T0 = 15.0 seconds (K150 means 15.0 x 100ms)\nANI T0\nOUT M1               // M1 = Green light phase\n\nLD T0\nOUT T1 K20           // T1 = 2 seconds (20 x 100ms)\nANI T1\nOUT M2               // M2 = Green light blinking phase\n\nLD T1\nOUT T2 K50           // T2 = 5.0 seconds (50 x 100ms)\nANI T2\nOUT M3               // M3 = Yellow light phase\n\nLD T2\nOUT T3 K280          // T3 = 28.0 seconds (280 x 100ms)\nOUT M4               // M4 = Red light phase\n\nLD M1\nLD M2\nAND M8013            // Blinking pulse (M8013)\nORB                  // OR B used to combine two logics\nOUT Y000             // Green light output\n\nLD M3\nOUT Y001             // Yellow light output\n\nLD M4\nOUT Y002             // Red light output\n\nEND                  // Program end\n\n"
    },
    {
        "question": "Please use the FX-series PLC instruction list to design traffic light control logic for a one-way road. The red, green, and yellow lights switch in sequence. Assume that pressing X0 starts the system and there is a stop button X1. The timing parameters are: green light 25.0 seconds, green light blinking 2 seconds, yellow light 5.0 seconds, red light 28.0 seconds, and the cycle repeats.",
        "answer": "LD X000              // Start button\nOR M0\nANI X001             // Stop button\nOUT M0               // System start flag\n\nLD M0\nANI T3               // Ensure the next timer has not reached\nOUT T0 K250          // T0 = 25.0 seconds (K250 means 25.0 x 100ms)\nANI T0\nOUT M1               // M1 = Green light phase\n\nLD T0\nOUT T1 K20           // T1 = 2 seconds (20 x 100ms)\nANI T1\nOUT M2               // M2 = Green light blinking phase\n\nLD T1\nOUT T2 K50           // T2 = 5.0 seconds (50 x 100ms)\nANI T2\nOUT M3               // M3 = Yellow light phase\n\nLD T2\nOUT T3 K280          // T3 = 28.0 seconds (280 x 100ms)\nOUT M4               // M4 = Red light phase\n\nLD M1\nLD M2\nAND M8013            // Blinking pulse (M8013)\nORB                  // OR B used to combine two logics\nOUT Y000             // Green light output\n\nLD M3\nOUT Y001             // Yellow light output\n\nLD M4\nOUT Y002             // Red light output\n\nEND                  // Program end\n\n"
    },
    {
        "question": "Please use the FX-series PLC instruction list to design traffic light control logic for a one-way road. The red, green, and yellow lights switch in sequence. Assume that pressing X0 starts the system and there is a stop button X1. The timing parameters are: green light 21.0 seconds, green light blinking 2 seconds, yellow light 4.0 seconds, red light 10.0 seconds, and the cycle repeats.",
        "answer": "LD X000              // Start button\nOR M0\nANI X001             // Stop button\nOUT M0               // System start flag\n\nLD M0\nANI T3               // Ensure the next timer has not reached\nOUT T0 K210          // T0 = 21.0 seconds (K210 means 21.0 x 100ms)\nANI T0\nOUT M1               // M1 = Green light phase\n\nLD T0\nOUT T1 K20           // T1 = 2 seconds (20 x 100ms)\nANI T1\nOUT M2               // M2 = Green light blinking phase\n\nLD T1\nOUT T2 K40           // T2 = 4.0 seconds (40 x 100ms)\nANI T2\nOUT M3               // M3 = Yellow light phase\n\nLD T2\nOUT T3 K100          // T3 = 10.0 seconds (100 x 100ms)\nOUT M4               // M4 = Red light phase\n\nLD M1\nLD M2\nAND M8013            // Blinking pulse (M8013)\nORB                  // OR B used to combine two logics\nOUT Y000             // Green light output\n\nLD M3\nOUT Y001             // Yellow light output\n\nLD M4\nOUT Y002             // Red light output\n\nEND                  // Program end\n\n"
    },
    {
        "question": "Please use the FX-series PLC instruction list to design traffic light control logic for a one-way road. The red, green, and yellow lights switch in sequence. Assume that pressing X0 starts the system and there is a stop button X1. The timing parameters are: green light 19.0 seconds, green light blinking 2 seconds, yellow light 5.0 seconds, red light 17.0 seconds, and the cycle repeats.",
        "answer": "LD X000              // Start button\nOR M0\nANI X001             // Stop button\nOUT M0               // System start flag\n\nLD M0\nANI T3               // Ensure the next timer has not reached\nOUT T0 K190          // T0 = 19.0 seconds (K190 means 19.0 x 100ms)\nANI T0\nOUT M1               // M1 = Green light phase\n\nLD T0\nOUT T1 K20           // T1 = 2 seconds (20 x 100ms)\nANI T1\nOUT M2               // M2 = Green light blinking phase\n\nLD T1\nOUT T2 K50           // T2 = 5.0 seconds (50 x 100ms)\nANI T2\nOUT M3               // M3 = Yellow light phase\n\nLD T2\nOUT T3 K170          // T3 = 17.0 seconds (170 x 100ms)\nOUT M4               // M4 = Red light phase\n\nLD M1\nLD M2\nAND M8013            // Blinking pulse (M8013)\nORB                  // OR B used to combine two logics\nOUT Y000             // Green light output\n\nLD M3\nOUT Y001             // Yellow light output\n\nLD M4\nOUT Y002             // Red light output\n\nEND                  // Program end\n\n"
    },
    {
        "question": "How to design a one-way traffic light system using Mitsubishi FX-series PLC (IL instruction list mode)? The system is started by button X0 and stopped by X1, with the sequence: green light for 25.0 seconds, green light blinking for 2 seconds, yellow light for 11.0 seconds, red light for 9.0 seconds, and then cycles again.",
        "answer": "LD X000              // Start button\nOR M0\nANI X001             // Stop button\nOUT M0               // System start flag\n\nLD M0\nANI T3               // Ensure the next timer has not reached\nOUT T0 K250          // T0 = 25.0 seconds (K250 means 250 x 100ms)\nANI T0\nOUT M1               // M1 = Green light phase\n\nLD T0\nOUT T1 K20           // T1 = 2 seconds (20 x 100ms)\nANI T1\nOUT M2               // M2 = Green light blinking phase\n\nLD T1\nOUT T2 K110           // T2 = 11.0 seconds (110 x 100ms)\nANI T2\nOUT M3               // M3 = Yellow light phase\n\nLD T2\nOUT T3 K90          // T3 = 9.0 seconds (90 x 100ms)\nOUT M4               // M4 = Red light phase\n\nLD M1\nLD M2\nAND M8013            // Blinking pulse (M8013)\nORB                  // OR B used to combine two logics\nOUT Y000             // Green light output\n\nLD M3\nOUT Y001             // Yellow light output\n\nLD M4\nOUT Y002             // Red light output\n\nEND                  // Program end\n"
    },
    {
        "question": "How to design a one-way traffic light system using Mitsubishi FX-series PLC (IL instruction list mode)? The system is started by button X0 and stopped by X1, with the sequence: green light for 22.0 seconds, green light blinking for 2 seconds, yellow light for 11.0 seconds, red light for 6.0 seconds, and then cycles again.",
        "answer": "LD X000              // Start button\nOR M0\nANI X001             // Stop button\nOUT M0               // System start flag\n\nLD M0\nANI T3               // Ensure the next timer has not reached\nOUT T0 K220          // T0 = 22.0 seconds (K220 means 220 x 100ms)\nANI T0\nOUT M1               // M1 = Green light phase\n\nLD T0\nOUT T1 K20           // T1 = 2 seconds (20 x 100ms)\nANI T1\nOUT M2               // M2 = Green light blinking phase\n\nLD T1\nOUT T2 K110           // T2 = 11.0 seconds (110 x 100ms)\nANI T2\nOUT M3               // M3 = Yellow light phase\n\nLD T2\nOUT T3 K60          // T3 = 6.0 seconds (60 x 100ms)\nOUT M4               // M4 = Red light phase\n\nLD M1\nLD M2\nAND M8013            // Blinking pulse (M8013)\nORB                  // OR B used to combine two logics\nOUT Y000             // Green light output\n\nLD M3\nOUT Y001             // Yellow light output\n\nLD M4\nOUT Y002             // Red light output\n\nEND                  // Program end\n"
    },
    {
        "question": "How to design a one-way traffic light system using Mitsubishi FX-series PLC (IL instruction list mode)? The system is started by button X0 and stopped by X1, with the sequence: green light for 25.0 seconds, green light blinking for 2 seconds, yellow light for 13.0 seconds, red light for 5.0 seconds, and then cycles again.",
        "answer": "LD X000              // Start button\nOR M0\nANI X001             // Stop button\nOUT M0               // System start flag\n\nLD M0\nANI T3               // Ensure the next timer has not reached\nOUT T0 K250          // T0 = 25.0 seconds (K250 means 250 x 100ms)\nANI T0\nOUT M1               // M1 = Green light phase\n\nLD T0\nOUT T1 K20           // T1 = 2 seconds (20 x 100ms)\nANI T1\nOUT M2               // M2 = Green light blinking phase\n\nLD T1\nOUT T2 K130           // T2 = 13.0 seconds (130 x 100ms)\nANI T2\nOUT M3               // M3 = Yellow light phase\n\nLD T2\nOUT T3 K50          // T3 = 5.0 seconds (50 x 100ms)\nOUT M4               // M4 = Red light phase\n\nLD M1\nLD M2\nAND M8013            // Blinking pulse (M8013)\nORB                  // OR B used to combine two logics\nOUT Y000             // Green light output\n\nLD M3\nOUT Y001             // Yellow light output\n\nLD M4\nOUT Y002             // Red light output\n\nEND                  // Program end\n"
    },
    {
        "question": "How to design a one-way traffic light system using Mitsubishi FX-series PLC (IL instruction list mode)? The system is started by button X0 and stopped by X1, with the sequence: green light for 19.0 seconds, green light blinking for 2 seconds, yellow light for 12.0 seconds, red light for 7.0 seconds, and then cycles again.",
        "answer": "LD X000              // Start button\nOR M0\nANI X001             // Stop button\nOUT M0               // System start flag\n\nLD M0\nANI T3               // Ensure the next timer has not reached\nOUT T0 K190          // T0 = 19.0 seconds (K190 means 190 x 100ms)\nANI T0\nOUT M1               // M1 = Green light phase\n\nLD T0\nOUT T1 K20           // T1 = 2 seconds (20 x 100ms)\nANI T1\nOUT M2               // M2 = Green light blinking phase\n\nLD T1\nOUT T2 K120           // T2 = 12.0 seconds (120 x 100ms)\nANI T2\nOUT M3               // M3 = Yellow light phase\n\nLD T2\nOUT T3 K70          // T3 = 7.0 seconds (70 x 100ms)\nOUT M4               // M4 = Red light phase\n\nLD M1\nLD M2\nAND M8013            // Blinking pulse (M8013)\nORB                  // OR B used to combine two logics\nOUT Y000             // Green light output\n\nLD M3\nOUT Y001             // Yellow light output\n\nLD M4\nOUT Y002             // Red light output\n\nEND                  // Program end\n"
    },
    {
        "question": "How to design a one-way traffic light system using Mitsubishi FX-series PLC (IL instruction list mode)? The system is started by button X0 and stopped by X1, with the sequence: green light for 22.0 seconds, green light blinking for 2 seconds, yellow light for 11.0 seconds, red light for 6.0 seconds, and then cycles again.",
        "answer": "LD X000              // Start button\nOR M0\nANI X001             // Stop button\nOUT M0               // System start flag\n\nLD M0\nANI T3               // Ensure the next timer has not reached\nOUT T0 K220          // T0 = 22.0 seconds (K220 means 220 x 100ms)\nANI T0\nOUT M1               // M1 = Green light phase\n\nLD T0\nOUT T1 K20           // T1 = 2 seconds (20 x 100ms)\nANI T1\nOUT M2               // M2 = Green light blinking phase\n\nLD T1\nOUT T2 K110           // T2 = 11.0 seconds (110 x 100ms)\nANI T2\nOUT M3               // M3 = Yellow light phase\n\nLD T2\nOUT T3 K60          // T3 = 6.0 seconds (60 x 100ms)\nOUT M4               // M4 = Red light phase\n\nLD M1\nLD M2\nAND M8013            // Blinking pulse (M8013)\nORB                  // OR B used to combine two logics\nOUT Y000             // Green light output\n\nLD M3\nOUT Y001             // Yellow light output\n\nLD M4\nOUT Y002             // Red light output\n\nEND                  // Program end\n"
    },
    {
        "question": "How to design a one-way traffic light system using Mitsubishi FX-series PLC (IL instruction list mode)? The system is started by button X0 and stopped by X1, with the sequence: green light for 15.0 seconds, green light blinking for 2 seconds, yellow light for 11.0 seconds, red light for 8.0 seconds, and then cycles again.",
        "answer": "LD X000              // Start button\nOR M0\nANI X001             // Stop button\nOUT M0               // System start flag\n\nLD M0\nANI T3               // Ensure the next timer has not reached\nOUT T0 K150          // T0 = 15.0 seconds (K150 means 150 x 100ms)\nANI T0\nOUT M1               // M1 = Green light phase\n\nLD T0\nOUT T1 K20           // T1 = 2 seconds (20 x 100ms)\nANI T1\nOUT M2               // M2 = Green light blinking phase\n\nLD T1\nOUT T2 K110           // T2 = 11.0 seconds (110 x 100ms)\nANI T2\nOUT M3               // M3 = Yellow light phase\n\nLD T2\nOUT T3 K80          // T3 = 8.0 seconds (80 x 100ms)\nOUT M4               // M4 = Red light phase\n\nLD M1\nLD M2\nAND M8013            // Blinking pulse (M8013)\nORB                  // OR B used to combine two logics\nOUT Y000             // Green light output\n\nLD M3\nOUT Y001             // Yellow light output\n\nLD M4\nOUT Y002             // Red light output\n\nEND                  // Program end\n"
    },
    {
        "question": "How to design a one-way traffic light system using Mitsubishi FX-series PLC (IL instruction list mode)? The system is started by button X0 and stopped by X1, with the sequence: green light for 22.0 seconds, green light blinking for 2 seconds, yellow light for 11.0 seconds, red light for 7.0 seconds, and then cycles again.",
        "answer": "LD X000              // Start button\nOR M0\nANI X001             // Stop button\nOUT M0               // System start flag\n\nLD M0\nANI T3               // Ensure the next timer has not reached\nOUT T0 K220          // T0 = 22.0 seconds (K220 means 220 x 100ms)\nANI T0\nOUT M1               // M1 = Green light phase\n\nLD T0\nOUT T1 K20           // T1 = 2 seconds (20 x 100ms)\nANI T1\nOUT M2               // M2 = Green light blinking phase\n\nLD T1\nOUT T2 K110           // T2 = 11.0 seconds (110 x 100ms)\nANI T2\nOUT M3               // M3 = Yellow light phase\n\nLD T2\nOUT T3 K70          // T3 = 7.0 seconds (70 x 100ms)\nOUT M4               // M4 = Red light phase\n\nLD M1\nLD M2\nAND M8013            // Blinking pulse (M8013)\nORB                  // OR B used to combine two logics\nOUT Y000             // Green light output\n\nLD M3\nOUT Y001             // Yellow light output\n\nLD M4\nOUT Y002             // Red light output\n\nEND                  // Program end\n"
    },
    {
        "question": "How to design a one-way traffic light system using Mitsubishi FX-series PLC (IL instruction list mode)? The system is started by button X0 and stopped by X1, with the sequence: green light for 25.0 seconds, green light blinking for 2 seconds, yellow light for 11.0 seconds, red light for 5.0 seconds, and then cycles again.",
        "answer": "LD X000              // Start button\nOR M0\nANI X001             // Stop button\nOUT M0               // System start flag\n\nLD M0\nANI T3               // Ensure the next timer has not reached\nOUT T0 K250          // T0 = 25.0 seconds (K250 means 250 x 100ms)\nANI T0\nOUT M1               // M1 = Green light phase\n\nLD T0\nOUT T1 K20           // T1 = 2 seconds (20 x 100ms)\nANI T1\nOUT M2               // M2 = Green light blinking phase\n\nLD T1\nOUT T2 K110           // T2 = 11.0 seconds (110 x 100ms)\nANI T2\nOUT M3               // M3 = Yellow light phase\n\nLD T2\nOUT T3 K50          // T3 = 5.0 seconds (50 x 100ms)\nOUT M4               // M4 = Red light phase\n\nLD M1\nLD M2\nAND M8013            // Blinking pulse (M8013)\nORB                  // OR B used to combine two logics\nOUT Y000             // Green light output\n\nLD M3\nOUT Y001             // Yellow light output\n\nLD M4\nOUT Y002             // Red light output\n\nEND                  // Program end\n"
    },
    {
        "question": "How to design a one-way traffic light system using Mitsubishi FX-series PLC (IL instruction list mode)? The system is started by button X0 and stopped by X1, with the sequence: green light for 22.0 seconds, green light blinking for 2 seconds, yellow light for 10.0 seconds, red light for 8.0 seconds, and then cycles again.",
        "answer": "LD X000              // Start button\nOR M0\nANI X001             // Stop button\nOUT M0               // System start flag\n\nLD M0\nANI T3               // Ensure the next timer has not reached\nOUT T0 K220          // T0 = 22.0 seconds (K220 means 220 x 100ms)\nANI T0\nOUT M1               // M1 = Green light phase\n\nLD T0\nOUT T1 K20           // T1 = 2 seconds (20 x 100ms)\nANI T1\nOUT M2               // M2 = Green light blinking phase\n\nLD T1\nOUT T2 K100           // T2 = 10.0 seconds (100 x 100ms)\nANI T2\nOUT M3               // M3 = Yellow light phase\n\nLD T2\nOUT T3 K80          // T3 = 8.0 seconds (80 x 100ms)\nOUT M4               // M4 = Red light phase\n\nLD M1\nLD M2\nAND M8013            // Blinking pulse (M8013)\nORB                  // OR B used to combine two logics\nOUT Y000             // Green light output\n\nLD M3\nOUT Y001             // Yellow light output\n\nLD M4\nOUT Y002             // Red light output\n\nEND                  // Program end\n"
    },
    {
        "question": "How to design a one-way traffic light system using Mitsubishi FX-series PLC (IL instruction list mode)? The system is started by button X0 and stopped by X1, with the sequence: green light for 22.0 seconds, green light blinking for 2 seconds, yellow light for 11.0 seconds, red light for 4.0 seconds, and then cycles again.",
        "answer": "LD X000              // Start button\nOR M0\nANI X001             // Stop button\nOUT M0               // System start flag\n\nLD M0\nANI T3               // Ensure the next timer has not reached\nOUT T0 K220          // T0 = 22.0 seconds (K220 means 220 x 100ms)\nANI T0\nOUT M1               // M1 = Green light phase\n\nLD T0\nOUT T1 K20           // T1 = 2 seconds (20 x 100ms)\nANI T1\nOUT M2               // M2 = Green light blinking phase\n\nLD T1\nOUT T2 K110           // T2 = 11.0 seconds (110 x 100ms)\nANI T2\nOUT M3               // M3 = Yellow light phase\n\nLD T2\nOUT T3 K40          // T3 = 4.0 seconds (40 x 100ms)\nOUT M4               // M4 = Red light phase\n\nLD M1\nLD M2\nAND M8013            // Blinking pulse (M8013)\nORB                  // OR B used to combine two logics\nOUT Y000             // Green light output\n\nLD M3\nOUT Y001             // Yellow light output\n\nLD M4\nOUT Y002             // Red light output\n\nEND                  // Program end\n"
    },
    {
        "question": "How to use Mitsubishi FX-series PLC IL instruction list, through MOV / DECP and other instructions, to implement red, yellow, and green lights switching sequentially on a one-way road? Assume one full cycle is 45 seconds, and define conditions for red, yellow, and green phases. Use D0 for countdown control.",
        "answer": "LD M8000           // Power ON detection bit (Always ON)\nMPS                // Push current logic state to stack\nAND M8013          // 1s pulse, used as timing trigger\nDECP D0            // Countdown (decrease D0 by 1 per scan)\n\nMPP                // Pop stack\nAND< D0 K0         // If D0 < 0, countdown is finished\nMOV K45 D0         // Reload 45 seconds\n\nLD M8000\nMPS\nAND> D0 K18        // If D0 > 18, it's green phase\nOUT Y0             // Green light ON\n\nMRD                // Read top of stack (without popping)\nAND> D0 K10        // D0 > 10\nAND<= D0 K18       // D0 <= 18, it's yellow phase\nOUT Y1             // Yellow light ON\n\nMPP                // Pop top of stack\nAND> D0 K0         // D0 > 0\nAND<= D0 K10       // D0 <= 10, it's red phase\nOUT Y2             // Red light ON\n\nEND                  // End of program\n"
    },
    {
        "question": "How to use Mitsubishi FX-series PLC IL instruction list, through MOV / DECP and other instructions, to implement red, yellow, and green lights switching sequentially on a one-way road? Assume one full cycle is 48 seconds, and define conditions for red, yellow, and green phases. Use D0 for countdown control.",
        "answer": "LD M8000           // Power ON detection bit (Always ON)\nMPS                // Push current logic state to stack\nAND M8013          // 1s pulse, used as timing trigger\nDECP D0            // Countdown (decrease D0 by 1 per scan)\n\nMPP                // Pop stack\nAND< D0 K0         // If D0 < 0, countdown is finished\nMOV K48 D0         // Reload 48 seconds\n\nLD M8000\nMPS\nAND> D0 K16        // If D0 > 16, it's green phase\nOUT Y0             // Green light ON\n\nMRD                // Read top of stack (without popping)\nAND> D0 K13        // D0 > 13\nAND<= D0 K16       // D0 <= 16, it's yellow phase\nOUT Y1             // Yellow light ON\n\nMPP                // Pop top of stack\nAND> D0 K0         // D0 > 0\nAND<= D0 K13       // D0 <= 13, it's red phase\nOUT Y2             // Red light ON\n\nEND                  // End of program\n"
    },
    {
        "question": "How to use Mitsubishi FX-series PLC IL instruction list, through MOV / DECP and other instructions, to implement red, yellow, and green lights switching sequentially on a one-way road? Assume one full cycle is 45 seconds, and define conditions for red, yellow, and green phases. Use D0 for countdown control.",
        "answer": "LD M8000           // Power ON detection bit (Always ON)\nMPS                // Push current logic state to stack\nAND M8013          // 1s pulse, used as timing trigger\nDECP D0            // Countdown (decrease D0 by 1 per scan)\n\nMPP                // Pop stack\nAND< D0 K0         // If D0 < 0, countdown is finished\nMOV K45 D0         // Reload 45 seconds\n\nLD M8000\nMPS\nAND> D0 K17        // If D0 > 17, it's green phase\nOUT Y0             // Green light ON\n\nMRD                // Read top of stack (without popping)\nAND> D0 K13        // D0 > 13\nAND<= D0 K17       // D0 <= 17, it's yellow phase\nOUT Y1             // Yellow light ON\n\nMPP                // Pop top of stack\nAND> D0 K0         // D0 > 0\nAND<= D0 K13       // D0 <= 13, it's red phase\nOUT Y2             // Red light ON\n\nEND                  // End of program\n"
    },
    {
        "question": "How to use Mitsubishi FX-series PLC IL instruction list, through MOV / DECP and other instructions, to implement red, yellow, and green lights switching sequentially on a one-way road? Assume one full cycle is 50 seconds, and define conditions for red, yellow, and green phases. Use D0 for countdown control.",
        "answer": "LD M8000           // Power ON detection bit (Always ON)\nMPS                // Push current logic state to stack\nAND M8013          // 1s pulse, used as timing trigger\nDECP D0            // Countdown (decrease D0 by 1 per scan)\n\nMPP                // Pop stack\nAND< D0 K0         // If D0 < 0, countdown is finished\nMOV K50 D0         // Reload 50 seconds\n\nLD M8000\nMPS\nAND> D0 K16        // If D0 > 16, it's green phase\nOUT Y0             // Green light ON\n\nMRD                // Read top of stack (without popping)\nAND> D0 K11        // D0 > 11\nAND<= D0 K16       // D0 <= 16, it's yellow phase\nOUT Y1             // Yellow light ON\n\nMPP                // Pop top of stack\nAND> D0 K0         // D0 > 0\nAND<= D0 K11       // D0 <= 11, it's red phase\nOUT Y2             // Red light ON\n\nEND                  // End of program\n"
    },
    {
        "question": "How to use Mitsubishi FX-series PLC IL instruction list, through MOV / DECP and other instructions, to implement red, yellow, and green lights switching sequentially on a one-way road? Assume one full cycle is 35 seconds, and define conditions for red, yellow, and green phases. Use D0 for countdown control.",
        "answer": "LD M8000           // Power ON detection bit (Always ON)\nMPS                // Push current logic state to stack\nAND M8013          // 1s pulse, used as timing trigger\nDECP D0            // Countdown (decrease D0 by 1 per scan)\n\nMPP                // Pop stack\nAND< D0 K0         // If D0 < 0, countdown is finished\nMOV K35 D0         // Reload 35 seconds\n\nLD M8000\nMPS\nAND> D0 K17        // If D0 > 17, it's green phase\nOUT Y0             // Green light ON\n\nMRD                // Read top of stack (without popping)\nAND> D0 K14        // D0 > 14\nAND<= D0 K17       // D0 <= 17, it's yellow phase\nOUT Y1             // Yellow light ON\n\nMPP                // Pop top of stack\nAND> D0 K0         // D0 > 0\nAND<= D0 K14       // D0 <= 14, it's red phase\nOUT Y2             // Red light ON\n\nEND                  // End of program\n"
    },
    {
        "question": "How to use Mitsubishi FX-series PLC IL instruction list, through MOV / DECP and other instructions, to implement red, yellow, and green lights switching sequentially on a one-way road? Assume one full cycle is 39 seconds, and define conditions for red, yellow, and green phases. Use D0 for countdown control.",
        "answer": "LD M8000           // Power ON detection bit (Always ON)\nMPS                // Push current logic state to stack\nAND M8013          // 1s pulse, used as timing trigger\nDECP D0            // Countdown (decrease D0 by 1 per scan)\n\nMPP                // Pop stack\nAND< D0 K0         // If D0 < 0, countdown is finished\nMOV K39 D0         // Reload 39 seconds\n\nLD M8000\nMPS\nAND> D0 K18        // If D0 > 18, it's green phase\nOUT Y0             // Green light ON\n\nMRD                // Read top of stack (without popping)\nAND> D0 K13        // D0 > 13\nAND<= D0 K18       // D0 <= 18, it's yellow phase\nOUT Y1             // Yellow light ON\n\nMPP                // Pop top of stack\nAND> D0 K0         // D0 > 0\nAND<= D0 K13       // D0 <= 13, it's red phase\nOUT Y2             // Red light ON\n\nEND                  // End of program\n"
    },
    {
        "question": "How to use Mitsubishi FX-series PLC IL instruction list, through MOV / DECP and other instructions, to implement red, yellow, and green lights switching sequentially on a one-way road? Assume one full cycle is 45 seconds, and define conditions for red, yellow, and green phases. Use D0 for countdown control.",
        "answer": "LD M8000           // Power ON detection bit (Always ON)\nMPS                // Push current logic state to stack\nAND M8013          // 1s pulse, used as timing trigger\nDECP D0            // Countdown (decrease D0 by 1 per scan)\n\nMPP                // Pop stack\nAND< D0 K0         // If D0 < 0, countdown is finished\nMOV K45 D0         // Reload 45 seconds\n\nLD M8000\nMPS\nAND> D0 K15        // If D0 > 15, it's green phase\nOUT Y0             // Green light ON\n\nMRD                // Read top of stack (without popping)\nAND> D0 K12        // D0 > 12\nAND<= D0 K15       // D0 <= 15, it's yellow phase\nOUT Y1             // Yellow light ON\n\nMPP                // Pop top of stack\nAND> D0 K0         // D0 > 0\nAND<= D0 K12       // D0 <= 12, it's red phase\nOUT Y2             // Red light ON\n\nEND                  // End of program\n"
    },
    {
        "question": "How to use Mitsubishi FX-series PLC IL instruction list, through MOV / DECP and other instructions, to implement red, yellow, and green lights switching sequentially on a one-way road? Assume one full cycle is 40 seconds, and define conditions for red, yellow, and green phases. Use D0 for countdown control.",
        "answer": "LD M8000           // Power ON detection bit (Always ON)\nMPS                // Push current logic state to stack\nAND M8013          // 1s pulse, used as timing trigger\nDECP D0            // Countdown (decrease D0 by 1 per scan)\n\nMPP                // Pop stack\nAND< D0 K0         // If D0 < 0, countdown is finished\nMOV K40 D0         // Reload 40 seconds\n\nLD M8000\nMPS\nAND> D0 K18        // If D0 > 18, it's green phase\nOUT Y0             // Green light ON\n\nMRD                // Read top of stack (without popping)\nAND> D0 K10        // D0 > 10\nAND<= D0 K18       // D0 <= 18, it's yellow phase\nOUT Y1             // Yellow light ON\n\nMPP                // Pop top of stack\nAND> D0 K0         // D0 > 0\nAND<= D0 K10       // D0 <= 10, it's red phase\nOUT Y2             // Red light ON\n\nEND                  // End of program\n"
    },
    {
        "question": "How to use Mitsubishi FX-series PLC IL instruction list, through MOV / DECP and other instructions, to implement red, yellow, and green lights switching sequentially on a one-way road? Assume one full cycle is 50 seconds, and define conditions for red, yellow, and green phases. Use D0 for countdown control.",
        "answer": "LD M8000           // Power ON detection bit (Always ON)\nMPS                // Push current logic state to stack\nAND M8013          // 1s pulse, used as timing trigger\nDECP D0            // Countdown (decrease D0 by 1 per scan)\n\nMPP                // Pop stack\nAND< D0 K0         // If D0 < 0, countdown is finished\nMOV K50 D0         // Reload 50 seconds\n\nLD M8000\nMPS\nAND> D0 K17        // If D0 > 17, it's green phase\nOUT Y0             // Green light ON\n\nMRD                // Read top of stack (without popping)\nAND> D0 K14        // D0 > 14\nAND<= D0 K17       // D0 <= 17, it's yellow phase\nOUT Y1             // Yellow light ON\n\nMPP                // Pop top of stack\nAND> D0 K0         // D0 > 0\nAND<= D0 K14       // D0 <= 14, it's red phase\nOUT Y2             // Red light ON\n\nEND                  // End of program\n"
    },
    {
        "question": "How to use Mitsubishi FX-series PLC IL instruction list, through MOV / DECP and other instructions, to implement red, yellow, and green lights switching sequentially on a one-way road? Assume one full cycle is 38 seconds, and define conditions for red, yellow, and green phases. Use D0 for countdown control.",
        "answer": "LD M8000           // Power ON detection bit (Always ON)\nMPS                // Push current logic state to stack\nAND M8013          // 1s pulse, used as timing trigger\nDECP D0            // Countdown (decrease D0 by 1 per scan)\n\nMPP                // Pop stack\nAND< D0 K0         // If D0 < 0, countdown is finished\nMOV K38 D0         // Reload 38 seconds\n\nLD M8000\nMPS\nAND> D0 K20        // If D0 > 20, it's green phase\nOUT Y0             // Green light ON\n\nMRD                // Read top of stack (without popping)\nAND> D0 K10        // D0 > 10\nAND<= D0 K20       // D0 <= 20, it's yellow phase\nOUT Y1             // Yellow light ON\n\nMPP                // Pop top of stack\nAND> D0 K0         // D0 > 0\nAND<= D0 K10       // D0 <= 10, it's red phase\nOUT Y2             // Red light ON\n\nEND                  // End of program\n"
    },
    {
        "question": "How to use Mitsubishi FX-series PLC IL instruction list and the DECO instruction to control a bidirectional red-yellow-green light cycle? Assume input X000, outputs Y000~Y005, and use M1~M16, M100, M101, T1~T6, and D1 to implement phase switching.",
        "answer": "LD M8000                   ; PLC startup pulse\nDECO D1 M10 K6             ; Decode D1 to control a 7-state cycle (M10~M16 ON)\n\nLD X000                    ; When emergency stop input X000 is activated\nRST D1                     ; Reset data register D1\nZRST M10 M16               ; Reset state relays M10~M16\nZRST M100 M101             ; Reset red light control relays M100~M101\n\nLD M10                     ; Start green light timing relay M10\nAND M1                     ; When M1 condition is true\nMOV K1 D1                  ; Write K1 to D1 to switch to next state\n// State 1: East-West green light phase\nLD M11                     ; State M11 (East-West green)\nOUT Y000                   ; East-West green light ON\nOUT T1 K170                 ; Green light lasts 17.0 seconds (T1)\nAND T1                     ; When T1 times out\nMOV K2 D1                  ; Switch to next state (East-West yellow)\n\n// State 2: East-West yellow light phase\nLD M12                     ; State M12 (East-West yellow)\nOUT Y001                   ; East-West yellow light ON\nOUT T2 K30                 ; Yellow light lasts 3.0 seconds (T2)\nAND T2                     ; When T2 times out\nMOV K3 D1                  ; Switch to next state (East-West red)\n\n// State 3: East-West red light phase\nLD M13                     ; State M13 (East-West red)\nOUT M100                   ; Both East-West and North-South red light control\nOUT T3 K3                 ; Red light lasts 226 seconds (T3)\nAND T3                     ; When T3 times out\nMOV K4 D1                  ; Switch to next state (North-South green)\n\n// State 4: North-South green light phase\nLD M14                     ; State M14 (North-South green)\nOUT Y003                   ; North-South green light ON\nOUT T4 K170                 ; Green light lasts 17.0 seconds (T4)\nAND T4                     ; When T4 times out\nMOV K5 D1                  ; Switch to next state (North-South yellow)\n\n// State 5: North-South yellow light phase\nLD M15                     ; State M15 (North-South yellow)\nOUT Y004                   ; North-South yellow light ON\nOUT T5 K30                 ; Yellow light lasts 3.0 seconds (T5)\nAND T5                     ; When T5 times out\nMOV K6 D1                  ; Switch to next state (North-South red)\n\n// State 6: North-South red light phase\nLD M16                     ; State M16 (North-South red)\nOUT M101                   ; Both East-West and North-South red light control\nOUT T6 K3                 ; Red light lasts 226 seconds (T6)\nAND T6                     ; When T6 times out\nMOV K1 D1                  ; Return to initial state to form a cycle\n\n// Red light output control\nLD M100                    ; East-West red light phase\nOR M14                     ; Or during North-South green\nOR M15                     ; Or during North-South yellow\nOR M16                     ; Or during North-South red\nOUT Y002                   ; East-West red light output\n\nLD M101                    ; North-South red light phase\nOR M11                     ; Or during East-West green\nOR M12                     ; Or during East-West yellow\nOR M13                     ; Or during East-West red\nOUT Y005                   ; North-South red light output\n\nEND                      // End of program\n"
    },
    {
        "question": "How to use Mitsubishi FX-series PLC IL instruction list and the DECO instruction to control a bidirectional red-yellow-green light cycle? Assume input X000, outputs Y000~Y005, and use M1~M16, M100, M101, T1~T6, and D1 to implement phase switching.",
        "answer": "LD M8000                   ; PLC startup pulse\nDECO D1 M10 K6             ; Decode D1 to control a 7-state cycle (M10~M16 ON)\n\nLD X000                    ; When emergency stop input X000 is activated\nRST D1                     ; Reset data register D1\nZRST M10 M16               ; Reset state relays M10~M16\nZRST M100 M101             ; Reset red light control relays M100~M101\n\nLD M10                     ; Start green light timing relay M10\nAND M1                     ; When M1 condition is true\nMOV K1 D1                  ; Write K1 to D1 to switch to next state\n// State 1: East-West green light phase\nLD M11                     ; State M11 (East-West green)\nOUT Y000                   ; East-West green light ON\nOUT T1 K140                 ; Green light lasts 14.0 seconds (T1)\nAND T1                     ; When T1 times out\nMOV K2 D1                  ; Switch to next state (East-West yellow)\n\n// State 2: East-West yellow light phase\nLD M12                     ; State M12 (East-West yellow)\nOUT Y001                   ; East-West yellow light ON\nOUT T2 K30                 ; Yellow light lasts 3.0 seconds (T2)\nAND T2                     ; When T2 times out\nMOV K3 D1                  ; Switch to next state (East-West red)\n\n// State 3: East-West red light phase\nLD M13                     ; State M13 (East-West red)\nOUT M100                   ; Both East-West and North-South red light control\nOUT T3 K1                 ; Red light lasts 192 seconds (T3)\nAND T3                     ; When T3 times out\nMOV K4 D1                  ; Switch to next state (North-South green)\n\n// State 4: North-South green light phase\nLD M14                     ; State M14 (North-South green)\nOUT Y003                   ; North-South green light ON\nOUT T4 K140                 ; Green light lasts 14.0 seconds (T4)\nAND T4                     ; When T4 times out\nMOV K5 D1                  ; Switch to next state (North-South yellow)\n\n// State 5: North-South yellow light phase\nLD M15                     ; State M15 (North-South yellow)\nOUT Y004                   ; North-South yellow light ON\nOUT T5 K30                 ; Yellow light lasts 3.0 seconds (T5)\nAND T5                     ; When T5 times out\nMOV K6 D1                  ; Switch to next state (North-South red)\n\n// State 6: North-South red light phase\nLD M16                     ; State M16 (North-South red)\nOUT M101                   ; Both East-West and North-South red light control\nOUT T6 K1                 ; Red light lasts 192 seconds (T6)\nAND T6                     ; When T6 times out\nMOV K1 D1                  ; Return to initial state to form a cycle\n\n// Red light output control\nLD M100                    ; East-West red light phase\nOR M14                     ; Or during North-South green\nOR M15                     ; Or during North-South yellow\nOR M16                     ; Or during North-South red\nOUT Y002                   ; East-West red light output\n\nLD M101                    ; North-South red light phase\nOR M11                     ; Or during East-West green\nOR M12                     ; Or during East-West yellow\nOR M13                     ; Or during East-West red\nOUT Y005                   ; North-South red light output\n\nEND                      // End of program\n"
    },
    {
        "question": "How to use Mitsubishi FX-series PLC IL instruction list and the DECO instruction to control a bidirectional red-yellow-green light cycle? Assume input X000, outputs Y000~Y005, and use M1~M16, M100, M101, T1~T6, and D1 to implement phase switching.",
        "answer": "LD M8000                   ; PLC startup pulse\nDECO D1 M10 K6             ; Decode D1 to control a 7-state cycle (M10~M16 ON)\n\nLD X000                    ; When emergency stop input X000 is activated\nRST D1                     ; Reset data register D1\nZRST M10 M16               ; Reset state relays M10~M16\nZRST M100 M101             ; Reset red light control relays M100~M101\n\nLD M10                     ; Start green light timing relay M10\nAND M1                     ; When M1 condition is true\nMOV K1 D1                  ; Write K1 to D1 to switch to next state\n// State 1: East-West green light phase\nLD M11                     ; State M11 (East-West green)\nOUT Y000                   ; East-West green light ON\nOUT T1 K200                 ; Green light lasts 20.0 seconds (T1)\nAND T1                     ; When T1 times out\nMOV K2 D1                  ; Switch to next state (East-West yellow)\n\n// State 2: East-West yellow light phase\nLD M12                     ; State M12 (East-West yellow)\nOUT Y001                   ; East-West yellow light ON\nOUT T2 K40                 ; Yellow light lasts 4.0 seconds (T2)\nAND T2                     ; When T2 times out\nMOV K3 D1                  ; Switch to next state (East-West red)\n\n// State 3: East-West red light phase\nLD M13                     ; State M13 (East-West red)\nOUT M100                   ; Both East-West and North-South red light control\nOUT T3 K4                 ; Red light lasts 268 seconds (T3)\nAND T3                     ; When T3 times out\nMOV K4 D1                  ; Switch to next state (North-South green)\n\n// State 4: North-South green light phase\nLD M14                     ; State M14 (North-South green)\nOUT Y003                   ; North-South green light ON\nOUT T4 K200                 ; Green light lasts 20.0 seconds (T4)\nAND T4                     ; When T4 times out\nMOV K5 D1                  ; Switch to next state (North-South yellow)\n\n// State 5: North-South yellow light phase\nLD M15                     ; State M15 (North-South yellow)\nOUT Y004                   ; North-South yellow light ON\nOUT T5 K40                 ; Yellow light lasts 4.0 seconds (T5)\nAND T5                     ; When T5 times out\nMOV K6 D1                  ; Switch to next state (North-South red)\n\n// State 6: North-South red light phase\nLD M16                     ; State M16 (North-South red)\nOUT M101                   ; Both East-West and North-South red light control\nOUT T6 K4                 ; Red light lasts 268 seconds (T6)\nAND T6                     ; When T6 times out\nMOV K1 D1                  ; Return to initial state to form a cycle\n\n// Red light output control\nLD M100                    ; East-West red light phase\nOR M14                     ; Or during North-South green\nOR M15                     ; Or during North-South yellow\nOR M16                     ; Or during North-South red\nOUT Y002                   ; East-West red light output\n\nLD M101                    ; North-South red light phase\nOR M11                     ; Or during East-West green\nOR M12                     ; Or during East-West yellow\nOR M13                     ; Or during East-West red\nOUT Y005                   ; North-South red light output\n\nEND                      // End of program\n"
    },
    {
        "question": "How to use Mitsubishi FX-series PLC IL instruction list and the DECO instruction to control a bidirectional red-yellow-green light cycle? Assume input X000, outputs Y000~Y005, and use M1~M16, M100, M101, T1~T6, and D1 to implement phase switching.",
        "answer": "LD M8000                   ; PLC startup pulse\nDECO D1 M10 K6             ; Decode D1 to control a 7-state cycle (M10~M16 ON)\n\nLD X000                    ; When emergency stop input X000 is activated\nRST D1                     ; Reset data register D1\nZRST M10 M16               ; Reset state relays M10~M16\nZRST M100 M101             ; Reset red light control relays M100~M101\n\nLD M10                     ; Start green light timing relay M10\nAND M1                     ; When M1 condition is true\nMOV K1 D1                  ; Write K1 to D1 to switch to next state\n// State 1: East-West green light phase\nLD M11                     ; State M11 (East-West green)\nOUT Y000                   ; East-West green light ON\nOUT T1 K180                 ; Green light lasts 18.0 seconds (T1)\nAND T1                     ; When T1 times out\nMOV K2 D1                  ; Switch to next state (East-West yellow)\n\n// State 2: East-West yellow light phase\nLD M12                     ; State M12 (East-West yellow)\nOUT Y001                   ; East-West yellow light ON\nOUT T2 K40                 ; Yellow light lasts 4.0 seconds (T2)\nAND T2                     ; When T2 times out\nMOV K3 D1                  ; Switch to next state (East-West red)\n\n// State 3: East-West red light phase\nLD M13                     ; State M13 (East-West red)\nOUT M100                   ; Both East-West and North-South red light control\nOUT T3 K5                 ; Red light lasts 250 seconds (T3)\nAND T3                     ; When T3 times out\nMOV K4 D1                  ; Switch to next state (North-South green)\n\n// State 4: North-South green light phase\nLD M14                     ; State M14 (North-South green)\nOUT Y003                   ; North-South green light ON\nOUT T4 K180                 ; Green light lasts 18.0 seconds (T4)\nAND T4                     ; When T4 times out\nMOV K5 D1                  ; Switch to next state (North-South yellow)\n\n// State 5: North-South yellow light phase\nLD M15                     ; State M15 (North-South yellow)\nOUT Y004                   ; North-South yellow light ON\nOUT T5 K40                 ; Yellow light lasts 4.0 seconds (T5)\nAND T5                     ; When T5 times out\nMOV K6 D1                  ; Switch to next state (North-South red)\n\n// State 6: North-South red light phase\nLD M16                     ; State M16 (North-South red)\nOUT M101                   ; Both East-West and North-South red light control\nOUT T6 K5                 ; Red light lasts 250 seconds (T6)\nAND T6                     ; When T6 times out\nMOV K1 D1                  ; Return to initial state to form a cycle\n\n// Red light output control\nLD M100                    ; East-West red light phase\nOR M14                     ; Or during North-South green\nOR M15                     ; Or during North-South yellow\nOR M16                     ; Or during North-South red\nOUT Y002                   ; East-West red light output\n\nLD M101                    ; North-South red light phase\nOR M11                     ; Or during East-West green\nOR M12                     ; Or during East-West yellow\nOR M13                     ; Or during East-West red\nOUT Y005                   ; North-South red light output\n\nEND                      // End of program\n"
    },
    {
        "question": "How to use Mitsubishi FX-series PLC IL instruction list and the DECO instruction to control a bidirectional red-yellow-green light cycle? Assume input X000, outputs Y000~Y005, and use M1~M16, M100, M101, T1~T6, and D1 to implement phase switching.",
        "answer": "LD M8000                   ; PLC startup pulse\nDECO D1 M10 K6             ; Decode D1 to control a 7-state cycle (M10~M16 ON)\n\nLD X000                    ; When emergency stop input X000 is activated\nRST D1                     ; Reset data register D1\nZRST M10 M16               ; Reset state relays M10~M16\nZRST M100 M101             ; Reset red light control relays M100~M101\n\nLD M10                     ; Start green light timing relay M10\nAND M1                     ; When M1 condition is true\nMOV K1 D1                  ; Write K1 to D1 to switch to next state\n// State 1: East-West green light phase\nLD M11                     ; State M11 (East-West green)\nOUT Y000                   ; East-West green light ON\nOUT T1 K90                 ; Green light lasts 9.0 seconds (T1)\nAND T1                     ; When T1 times out\nMOV K2 D1                  ; Switch to next state (East-West yellow)\n\n// State 2: East-West yellow light phase\nLD M12                     ; State M12 (East-West yellow)\nOUT Y001                   ; East-West yellow light ON\nOUT T2 K40                 ; Yellow light lasts 4.0 seconds (T2)\nAND T2                     ; When T2 times out\nMOV K3 D1                  ; Switch to next state (East-West red)\n\n// State 3: East-West red light phase\nLD M13                     ; State M13 (East-West red)\nOUT M100                   ; Both East-West and North-South red light control\nOUT T3 K3                 ; Red light lasts 156 seconds (T3)\nAND T3                     ; When T3 times out\nMOV K4 D1                  ; Switch to next state (North-South green)\n\n// State 4: North-South green light phase\nLD M14                     ; State M14 (North-South green)\nOUT Y003                   ; North-South green light ON\nOUT T4 K90                 ; Green light lasts 9.0 seconds (T4)\nAND T4                     ; When T4 times out\nMOV K5 D1                  ; Switch to next state (North-South yellow)\n\n// State 5: North-South yellow light phase\nLD M15                     ; State M15 (North-South yellow)\nOUT Y004                   ; North-South yellow light ON\nOUT T5 K40                 ; Yellow light lasts 4.0 seconds (T5)\nAND T5                     ; When T5 times out\nMOV K6 D1                  ; Switch to next state (North-South red)\n\n// State 6: North-South red light phase\nLD M16                     ; State M16 (North-South red)\nOUT M101                   ; Both East-West and North-South red light control\nOUT T6 K3                 ; Red light lasts 156 seconds (T6)\nAND T6                     ; When T6 times out\nMOV K1 D1                  ; Return to initial state to form a cycle\n\n// Red light output control\nLD M100                    ; East-West red light phase\nOR M14                     ; Or during North-South green\nOR M15                     ; Or during North-South yellow\nOR M16                     ; Or during North-South red\nOUT Y002                   ; East-West red light output\n\nLD M101                    ; North-South red light phase\nOR M11                     ; Or during East-West green\nOR M12                     ; Or during East-West yellow\nOR M13                     ; Or during East-West red\nOUT Y005                   ; North-South red light output\n\nEND                      // End of program\n"
    },
    {
        "question": "How to use Mitsubishi FX-series PLC IL instruction list and the DECO instruction to control a bidirectional red-yellow-green light cycle? Assume input X000, outputs Y000~Y005, and use M1~M16, M100, M101, T1~T6, and D1 to implement phase switching.",
        "answer": "LD M8000                   ; PLC startup pulse\nDECO D1 M10 K6             ; Decode D1 to control a 7-state cycle (M10~M16 ON)\n\nLD X000                    ; When emergency stop input X000 is activated\nRST D1                     ; Reset data register D1\nZRST M10 M16               ; Reset state relays M10~M16\nZRST M100 M101             ; Reset red light control relays M100~M101\n\nLD M10                     ; Start green light timing relay M10\nAND M1                     ; When M1 condition is true\nMOV K1 D1                  ; Write K1 to D1 to switch to next state\n// State 1: East-West green light phase\nLD M11                     ; State M11 (East-West green)\nOUT Y000                   ; East-West green light ON\nOUT T1 K250                 ; Green light lasts 25.0 seconds (T1)\nAND T1                     ; When T1 times out\nMOV K2 D1                  ; Switch to next state (East-West yellow)\n\n// State 2: East-West yellow light phase\nLD M12                     ; State M12 (East-West yellow)\nOUT Y001                   ; East-West yellow light ON\nOUT T2 K40                 ; Yellow light lasts 4.0 seconds (T2)\nAND T2                     ; When T2 times out\nMOV K3 D1                  ; Switch to next state (East-West red)\n\n// State 3: East-West red light phase\nLD M13                     ; State M13 (East-West red)\nOUT M100                   ; Both East-West and North-South red light control\nOUT T3 K3                 ; Red light lasts 316 seconds (T3)\nAND T3                     ; When T3 times out\nMOV K4 D1                  ; Switch to next state (North-South green)\n\n// State 4: North-South green light phase\nLD M14                     ; State M14 (North-South green)\nOUT Y003                   ; North-South green light ON\nOUT T4 K250                 ; Green light lasts 25.0 seconds (T4)\nAND T4                     ; When T4 times out\nMOV K5 D1                  ; Switch to next state (North-South yellow)\n\n// State 5: North-South yellow light phase\nLD M15                     ; State M15 (North-South yellow)\nOUT Y004                   ; North-South yellow light ON\nOUT T5 K40                 ; Yellow light lasts 4.0 seconds (T5)\nAND T5                     ; When T5 times out\nMOV K6 D1                  ; Switch to next state (North-South red)\n\n// State 6: North-South red light phase\nLD M16                     ; State M16 (North-South red)\nOUT M101                   ; Both East-West and North-South red light control\nOUT T6 K3                 ; Red light lasts 316 seconds (T6)\nAND T6                     ; When T6 times out\nMOV K1 D1                  ; Return to initial state to form a cycle\n\n// Red light output control\nLD M100                    ; East-West red light phase\nOR M14                     ; Or during North-South green\nOR M15                     ; Or during North-South yellow\nOR M16                     ; Or during North-South red\nOUT Y002                   ; East-West red light output\n\nLD M101                    ; North-South red light phase\nOR M11                     ; Or during East-West green\nOR M12                     ; Or during East-West yellow\nOR M13                     ; Or during East-West red\nOUT Y005                   ; North-South red light output\n\nEND                      // End of program\n"
    },
    {
        "question": "How to use Mitsubishi FX-series PLC IL instruction list and the DECO instruction to control a bidirectional red-yellow-green light cycle? Assume input X000, outputs Y000~Y005, and use M1~M16, M100, M101, T1~T6, and D1 to implement phase switching.",
        "answer": "LD M8000                   ; PLC startup pulse\nDECO D1 M10 K6             ; Decode D1 to control a 7-state cycle (M10~M16 ON)\n\nLD X000                    ; When emergency stop input X000 is activated\nRST D1                     ; Reset data register D1\nZRST M10 M16               ; Reset state relays M10~M16\nZRST M100 M101             ; Reset red light control relays M100~M101\n\nLD M10                     ; Start green light timing relay M10\nAND M1                     ; When M1 condition is true\nMOV K1 D1                  ; Write K1 to D1 to switch to next state\n// State 1: East-West green light phase\nLD M11                     ; State M11 (East-West green)\nOUT Y000                   ; East-West green light ON\nOUT T1 K70                 ; Green light lasts 7.0 seconds (T1)\nAND T1                     ; When T1 times out\nMOV K2 D1                  ; Switch to next state (East-West yellow)\n\n// State 2: East-West yellow light phase\nLD M12                     ; State M12 (East-West yellow)\nOUT Y001                   ; East-West yellow light ON\nOUT T2 K40                 ; Yellow light lasts 4.0 seconds (T2)\nAND T2                     ; When T2 times out\nMOV K3 D1                  ; Switch to next state (East-West red)\n\n// State 3: East-West red light phase\nLD M13                     ; State M13 (East-West red)\nOUT M100                   ; Both East-West and North-South red light control\nOUT T3 K1                 ; Red light lasts 132 seconds (T3)\nAND T3                     ; When T3 times out\nMOV K4 D1                  ; Switch to next state (North-South green)\n\n// State 4: North-South green light phase\nLD M14                     ; State M14 (North-South green)\nOUT Y003                   ; North-South green light ON\nOUT T4 K70                 ; Green light lasts 7.0 seconds (T4)\nAND T4                     ; When T4 times out\nMOV K5 D1                  ; Switch to next state (North-South yellow)\n\n// State 5: North-South yellow light phase\nLD M15                     ; State M15 (North-South yellow)\nOUT Y004                   ; North-South yellow light ON\nOUT T5 K40                 ; Yellow light lasts 4.0 seconds (T5)\nAND T5                     ; When T5 times out\nMOV K6 D1                  ; Switch to next state (North-South red)\n\n// State 6: North-South red light phase\nLD M16                     ; State M16 (North-South red)\nOUT M101                   ; Both East-West and North-South red light control\nOUT T6 K1                 ; Red light lasts 132 seconds (T6)\nAND T6                     ; When T6 times out\nMOV K1 D1                  ; Return to initial state to form a cycle\n\n// Red light output control\nLD M100                    ; East-West red light phase\nOR M14                     ; Or during North-South green\nOR M15                     ; Or during North-South yellow\nOR M16                     ; Or during North-South red\nOUT Y002                   ; East-West red light output\n\nLD M101                    ; North-South red light phase\nOR M11                     ; Or during East-West green\nOR M12                     ; Or during East-West yellow\nOR M13                     ; Or during East-West red\nOUT Y005                   ; North-South red light output\n\nEND                      // End of program\n"
    },
    {
        "question": "How to use Mitsubishi FX-series PLC IL instruction list and the DECO instruction to control a bidirectional red-yellow-green light cycle? Assume input X000, outputs Y000~Y005, and use M1~M16, M100, M101, T1~T6, and D1 to implement phase switching.",
        "answer": "LD M8000                   ; PLC startup pulse\nDECO D1 M10 K6             ; Decode D1 to control a 7-state cycle (M10~M16 ON)\n\nLD X000                    ; When emergency stop input X000 is activated\nRST D1                     ; Reset data register D1\nZRST M10 M16               ; Reset state relays M10~M16\nZRST M100 M101             ; Reset red light control relays M100~M101\n\nLD M10                     ; Start green light timing relay M10\nAND M1                     ; When M1 condition is true\nMOV K1 D1                  ; Write K1 to D1 to switch to next state\n// State 1: East-West green light phase\nLD M11                     ; State M11 (East-West green)\nOUT Y000                   ; East-West green light ON\nOUT T1 K210                 ; Green light lasts 21.0 seconds (T1)\nAND T1                     ; When T1 times out\nMOV K2 D1                  ; Switch to next state (East-West yellow)\n\n// State 2: East-West yellow light phase\nLD M12                     ; State M12 (East-West yellow)\nOUT Y001                   ; East-West yellow light ON\nOUT T2 K30                 ; Yellow light lasts 3.0 seconds (T2)\nAND T2                     ; When T2 times out\nMOV K3 D1                  ; Switch to next state (East-West red)\n\n// State 3: East-West red light phase\nLD M13                     ; State M13 (East-West red)\nOUT M100                   ; Both East-West and North-South red light control\nOUT T3 K5                 ; Red light lasts 270 seconds (T3)\nAND T3                     ; When T3 times out\nMOV K4 D1                  ; Switch to next state (North-South green)\n\n// State 4: North-South green light phase\nLD M14                     ; State M14 (North-South green)\nOUT Y003                   ; North-South green light ON\nOUT T4 K210                 ; Green light lasts 21.0 seconds (T4)\nAND T4                     ; When T4 times out\nMOV K5 D1                  ; Switch to next state (North-South yellow)\n\n// State 5: North-South yellow light phase\nLD M15                     ; State M15 (North-South yellow)\nOUT Y004                   ; North-South yellow light ON\nOUT T5 K30                 ; Yellow light lasts 3.0 seconds (T5)\nAND T5                     ; When T5 times out\nMOV K6 D1                  ; Switch to next state (North-South red)\n\n// State 6: North-South red light phase\nLD M16                     ; State M16 (North-South red)\nOUT M101                   ; Both East-West and North-South red light control\nOUT T6 K5                 ; Red light lasts 270 seconds (T6)\nAND T6                     ; When T6 times out\nMOV K1 D1                  ; Return to initial state to form a cycle\n\n// Red light output control\nLD M100                    ; East-West red light phase\nOR M14                     ; Or during North-South green\nOR M15                     ; Or during North-South yellow\nOR M16                     ; Or during North-South red\nOUT Y002                   ; East-West red light output\n\nLD M101                    ; North-South red light phase\nOR M11                     ; Or during East-West green\nOR M12                     ; Or during East-West yellow\nOR M13                     ; Or during East-West red\nOUT Y005                   ; North-South red light output\n\nEND                      // End of program\n"
    },
    {
        "question": "How to use Mitsubishi FX-series PLC IL instruction list and the DECO instruction to control a bidirectional red-yellow-green light cycle? Assume input X000, outputs Y000~Y005, and use M1~M16, M100, M101, T1~T6, and D1 to implement phase switching.",
        "answer": "LD M8000                   ; PLC startup pulse\nDECO D1 M10 K6             ; Decode D1 to control a 7-state cycle (M10~M16 ON)\n\nLD X000                    ; When emergency stop input X000 is activated\nRST D1                     ; Reset data register D1\nZRST M10 M16               ; Reset state relays M10~M16\nZRST M100 M101             ; Reset red light control relays M100~M101\n\nLD M10                     ; Start green light timing relay M10\nAND M1                     ; When M1 condition is true\nMOV K1 D1                  ; Write K1 to D1 to switch to next state\n// State 1: East-West green light phase\nLD M11                     ; State M11 (East-West green)\nOUT Y000                   ; East-West green light ON\nOUT T1 K90                 ; Green light lasts 9.0 seconds (T1)\nAND T1                     ; When T1 times out\nMOV K2 D1                  ; Switch to next state (East-West yellow)\n\n// State 2: East-West yellow light phase\nLD M12                     ; State M12 (East-West yellow)\nOUT Y001                   ; East-West yellow light ON\nOUT T2 K50                 ; Yellow light lasts 5.0 seconds (T2)\nAND T2                     ; When T2 times out\nMOV K3 D1                  ; Switch to next state (East-West red)\n\n// State 3: East-West red light phase\nLD M13                     ; State M13 (East-West red)\nOUT M100                   ; Both East-West and North-South red light control\nOUT T3 K3                 ; Red light lasts 166 seconds (T3)\nAND T3                     ; When T3 times out\nMOV K4 D1                  ; Switch to next state (North-South green)\n\n// State 4: North-South green light phase\nLD M14                     ; State M14 (North-South green)\nOUT Y003                   ; North-South green light ON\nOUT T4 K90                 ; Green light lasts 9.0 seconds (T4)\nAND T4                     ; When T4 times out\nMOV K5 D1                  ; Switch to next state (North-South yellow)\n\n// State 5: North-South yellow light phase\nLD M15                     ; State M15 (North-South yellow)\nOUT Y004                   ; North-South yellow light ON\nOUT T5 K50                 ; Yellow light lasts 5.0 seconds (T5)\nAND T5                     ; When T5 times out\nMOV K6 D1                  ; Switch to next state (North-South red)\n\n// State 6: North-South red light phase\nLD M16                     ; State M16 (North-South red)\nOUT M101                   ; Both East-West and North-South red light control\nOUT T6 K3                 ; Red light lasts 166 seconds (T6)\nAND T6                     ; When T6 times out\nMOV K1 D1                  ; Return to initial state to form a cycle\n\n// Red light output control\nLD M100                    ; East-West red light phase\nOR M14                     ; Or during North-South green\nOR M15                     ; Or during North-South yellow\nOR M16                     ; Or during North-South red\nOUT Y002                   ; East-West red light output\n\nLD M101                    ; North-South red light phase\nOR M11                     ; Or during East-West green\nOR M12                     ; Or during East-West yellow\nOR M13                     ; Or during East-West red\nOUT Y005                   ; North-South red light output\n\nEND                      // End of program\n"
    },
    {
        "question": "How to use Mitsubishi FX-series PLC IL instruction list and the DECO instruction to control a bidirectional red-yellow-green light cycle? Assume input X000, outputs Y000~Y005, and use M1~M16, M100, M101, T1~T6, and D1 to implement phase switching.",
        "answer": "LD M8000                   ; PLC startup pulse\nDECO D1 M10 K6             ; Decode D1 to control a 7-state cycle (M10~M16 ON)\n\nLD X000                    ; When emergency stop input X000 is activated\nRST D1                     ; Reset data register D1\nZRST M10 M16               ; Reset state relays M10~M16\nZRST M100 M101             ; Reset red light control relays M100~M101\n\nLD M10                     ; Start green light timing relay M10\nAND M1                     ; When M1 condition is true\nMOV K1 D1                  ; Write K1 to D1 to switch to next state\n// State 1: East-West green light phase\nLD M11                     ; State M11 (East-West green)\nOUT Y000                   ; East-West green light ON\nOUT T1 K80                 ; Green light lasts 8.0 seconds (T1)\nAND T1                     ; When T1 times out\nMOV K2 D1                  ; Switch to next state (East-West yellow)\n\n// State 2: East-West yellow light phase\nLD M12                     ; State M12 (East-West yellow)\nOUT Y001                   ; East-West yellow light ON\nOUT T2 K40                 ; Yellow light lasts 4.0 seconds (T2)\nAND T2                     ; When T2 times out\nMOV K3 D1                  ; Switch to next state (East-West red)\n\n// State 3: East-West red light phase\nLD M13                     ; State M13 (East-West red)\nOUT M100                   ; Both East-West and North-South red light control\nOUT T3 K3                 ; Red light lasts 146 seconds (T3)\nAND T3                     ; When T3 times out\nMOV K4 D1                  ; Switch to next state (North-South green)\n\n// State 4: North-South green light phase\nLD M14                     ; State M14 (North-South green)\nOUT Y003                   ; North-South green light ON\nOUT T4 K80                 ; Green light lasts 8.0 seconds (T4)\nAND T4                     ; When T4 times out\nMOV K5 D1                  ; Switch to next state (North-South yellow)\n\n// State 5: North-South yellow light phase\nLD M15                     ; State M15 (North-South yellow)\nOUT Y004                   ; North-South yellow light ON\nOUT T5 K40                 ; Yellow light lasts 4.0 seconds (T5)\nAND T5                     ; When T5 times out\nMOV K6 D1                  ; Switch to next state (North-South red)\n\n// State 6: North-South red light phase\nLD M16                     ; State M16 (North-South red)\nOUT M101                   ; Both East-West and North-South red light control\nOUT T6 K3                 ; Red light lasts 146 seconds (T6)\nAND T6                     ; When T6 times out\nMOV K1 D1                  ; Return to initial state to form a cycle\n\n// Red light output control\nLD M100                    ; East-West red light phase\nOR M14                     ; Or during North-South green\nOR M15                     ; Or during North-South yellow\nOR M16                     ; Or during North-South red\nOUT Y002                   ; East-West red light output\n\nLD M101                    ; North-South red light phase\nOR M11                     ; Or during East-West green\nOR M12                     ; Or during East-West yellow\nOR M13                     ; Or during East-West red\nOUT Y005                   ; North-South red light output\n\nEND                      // End of program\n"
    },
    {
        "question": "How to use Mitsubishi FX-series PLC IL instruction list to design a bidirectional traffic light control logic? Assume both North-South and East-West directions have green, yellow, and red light cycles, and there is a 2-second blinking warning before the green light ends.",
        "answer": "LD X000                  // Start button\nOR  M0\nANI X001                 // Stop button\nOUT M0                   // System start flag\n\nLD M0\nANI T7                   // Ensure not yet reached final timer\nOUT T0 K150               // T0 = 15.0 sec\nANI T0\nOUT M1                   // M1 = North-South green phase\n\nLD T0\nOUT T1 K20               // T1 = 2 sec\nANI T1\nOUT M2                   // M2 = North-South green blinking phase\n\nLD T1\nOUT T2 K40               // T2 = 4.0 sec\nANI T2\nOUT M3                   // M3 = North-South yellow phase\n\nLD T2\nOUT T3 K40               // T3 = 4.0 sec\nANI T3\nOUT M4                   // M4 = All-direction red pre-phase\n\nLD T3\nOUT T4 K150               // T4 = 15.0 sec\nANI T4\nOUT M5                   // M5 = East-West green phase\n\nLD T4\nOUT T5 K20               // T5 = 2 sec\nANI T5\nOUT M6                   // M6 = East-West green blinking phase\n\nLD T5\nOUT T6 K40               // T6 = 4.0 sec\nANI T6\nOUT M7                   // M7 = East-West yellow phase\n\nLD T6\nOUT T7 K40               // T7 = 4.0 sec\nOUT M8                   // M8 = All-direction red pre-phase\n\n// North-South light output\nLD M1\nLD M2\nAND M8013                // Blinking pulse\nORB\nOUT Y000                 // North-South green light\n\nLD M3\nOUT Y001                 // North-South yellow light\n\nLD M4\nOR  M5\nOR  M6\nOR  M7\nOR  M8\nOUT Y002                 // North-South red light\n\n// East-West light output\nLD M5\nLD M6\nAND M8013\nORB\nOUT Y003                 // East-West green light\n\nLD M7\nOUT Y004                 // East-West yellow light\n\nLD M1\nOR  M2\nOR  M3\nOR  M4\nOR  M8\nOUT Y005                 // East-West red light\n\nEND                      // End of program\n"
    },
    {
        "question": "How to use Mitsubishi FX-series PLC IL instruction list to design a bidirectional traffic light control logic? Assume both North-South and East-West directions have green, yellow, and red light cycles, and there is a 2-second blinking warning before the green light ends.",
        "answer": "LD X000                  // Start button\nOR  M0\nANI X001                 // Stop button\nOUT M0                   // System start flag\n\nLD M0\nANI T7                   // Ensure not yet reached final timer\nOUT T0 K90               // T0 = 9.0 sec\nANI T0\nOUT M1                   // M1 = North-South green phase\n\nLD T0\nOUT T1 K20               // T1 = 2 sec\nANI T1\nOUT M2                   // M2 = North-South green blinking phase\n\nLD T1\nOUT T2 K50               // T2 = 5.0 sec\nANI T2\nOUT M3                   // M3 = North-South yellow phase\n\nLD T2\nOUT T3 K30               // T3 = 3.0 sec\nANI T3\nOUT M4                   // M4 = All-direction red pre-phase\n\nLD T3\nOUT T4 K90               // T4 = 9.0 sec\nANI T4\nOUT M5                   // M5 = East-West green phase\n\nLD T4\nOUT T5 K20               // T5 = 2 sec\nANI T5\nOUT M6                   // M6 = East-West green blinking phase\n\nLD T5\nOUT T6 K50               // T6 = 5.0 sec\nANI T6\nOUT M7                   // M7 = East-West yellow phase\n\nLD T6\nOUT T7 K30               // T7 = 3.0 sec\nOUT M8                   // M8 = All-direction red pre-phase\n\n// North-South light output\nLD M1\nLD M2\nAND M8013                // Blinking pulse\nORB\nOUT Y000                 // North-South green light\n\nLD M3\nOUT Y001                 // North-South yellow light\n\nLD M4\nOR  M5\nOR  M6\nOR  M7\nOR  M8\nOUT Y002                 // North-South red light\n\n// East-West light output\nLD M5\nLD M6\nAND M8013\nORB\nOUT Y003                 // East-West green light\n\nLD M7\nOUT Y004                 // East-West yellow light\n\nLD M1\nOR  M2\nOR  M3\nOR  M4\nOR  M8\nOUT Y005                 // East-West red light\n\nEND                      // End of program\n"
    },
    {
        "question": "How to use Mitsubishi FX-series PLC IL instruction list to design a bidirectional traffic light control logic? Assume both North-South and East-West directions have green, yellow, and red light cycles, and there is a 2-second blinking warning before the green light ends.",
        "answer": "LD X000                  // Start button\nOR  M0\nANI X001                 // Stop button\nOUT M0                   // System start flag\n\nLD M0\nANI T7                   // Ensure not yet reached final timer\nOUT T0 K170               // T0 = 17.0 sec\nANI T0\nOUT M1                   // M1 = North-South green phase\n\nLD T0\nOUT T1 K20               // T1 = 2 sec\nANI T1\nOUT M2                   // M2 = North-South green blinking phase\n\nLD T1\nOUT T2 K40               // T2 = 4.0 sec\nANI T2\nOUT M3                   // M3 = North-South yellow phase\n\nLD T2\nOUT T3 K10               // T3 = 1.0 sec\nANI T3\nOUT M4                   // M4 = All-direction red pre-phase\n\nLD T3\nOUT T4 K170               // T4 = 17.0 sec\nANI T4\nOUT M5                   // M5 = East-West green phase\n\nLD T4\nOUT T5 K20               // T5 = 2 sec\nANI T5\nOUT M6                   // M6 = East-West green blinking phase\n\nLD T5\nOUT T6 K40               // T6 = 4.0 sec\nANI T6\nOUT M7                   // M7 = East-West yellow phase\n\nLD T6\nOUT T7 K10               // T7 = 1.0 sec\nOUT M8                   // M8 = All-direction red pre-phase\n\n// North-South light output\nLD M1\nLD M2\nAND M8013                // Blinking pulse\nORB\nOUT Y000                 // North-South green light\n\nLD M3\nOUT Y001                 // North-South yellow light\n\nLD M4\nOR  M5\nOR  M6\nOR  M7\nOR  M8\nOUT Y002                 // North-South red light\n\n// East-West light output\nLD M5\nLD M6\nAND M8013\nORB\nOUT Y003                 // East-West green light\n\nLD M7\nOUT Y004                 // East-West yellow light\n\nLD M1\nOR  M2\nOR  M3\nOR  M4\nOR  M8\nOUT Y005                 // East-West red light\n\nEND                      // End of program\n"
    },
    {
        "question": "How to use Mitsubishi FX-series PLC IL instruction list to design a bidirectional traffic light control logic? Assume both North-South and East-West directions have green, yellow, and red light cycles, and there is a 2-second blinking warning before the green light ends.",
        "answer": "LD X000                  // Start button\nOR  M0\nANI X001                 // Stop button\nOUT M0                   // System start flag\n\nLD M0\nANI T7                   // Ensure not yet reached final timer\nOUT T0 K140               // T0 = 14.0 sec\nANI T0\nOUT M1                   // M1 = North-South green phase\n\nLD T0\nOUT T1 K20               // T1 = 2 sec\nANI T1\nOUT M2                   // M2 = North-South green blinking phase\n\nLD T1\nOUT T2 K30               // T2 = 3.0 sec\nANI T2\nOUT M3                   // M3 = North-South yellow phase\n\nLD T2\nOUT T3 K10               // T3 = 1.0 sec\nANI T3\nOUT M4                   // M4 = All-direction red pre-phase\n\nLD T3\nOUT T4 K140               // T4 = 14.0 sec\nANI T4\nOUT M5                   // M5 = East-West green phase\n\nLD T4\nOUT T5 K20               // T5 = 2 sec\nANI T5\nOUT M6                   // M6 = East-West green blinking phase\n\nLD T5\nOUT T6 K30               // T6 = 3.0 sec\nANI T6\nOUT M7                   // M7 = East-West yellow phase\n\nLD T6\nOUT T7 K10               // T7 = 1.0 sec\nOUT M8                   // M8 = All-direction red pre-phase\n\n// North-South light output\nLD M1\nLD M2\nAND M8013                // Blinking pulse\nORB\nOUT Y000                 // North-South green light\n\nLD M3\nOUT Y001                 // North-South yellow light\n\nLD M4\nOR  M5\nOR  M6\nOR  M7\nOR  M8\nOUT Y002                 // North-South red light\n\n// East-West light output\nLD M5\nLD M6\nAND M8013\nORB\nOUT Y003                 // East-West green light\n\nLD M7\nOUT Y004                 // East-West yellow light\n\nLD M1\nOR  M2\nOR  M3\nOR  M4\nOR  M8\nOUT Y005                 // East-West red light\n\nEND                      // End of program\n"
    },
    {
        "question": "How to use Mitsubishi FX-series PLC IL instruction list to design a bidirectional traffic light control logic? Assume both North-South and East-West directions have green, yellow, and red light cycles, and there is a 2-second blinking warning before the green light ends.",
        "answer": "LD X000                  // Start button\nOR  M0\nANI X001                 // Stop button\nOUT M0                   // System start flag\n\nLD M0\nANI T7                   // Ensure not yet reached final timer\nOUT T0 K200               // T0 = 20.0 sec\nANI T0\nOUT M1                   // M1 = North-South green phase\n\nLD T0\nOUT T1 K20               // T1 = 2 sec\nANI T1\nOUT M2                   // M2 = North-South green blinking phase\n\nLD T1\nOUT T2 K40               // T2 = 4.0 sec\nANI T2\nOUT M3                   // M3 = North-South yellow phase\n\nLD T2\nOUT T3 K20               // T3 = 2.0 sec\nANI T3\nOUT M4                   // M4 = All-direction red pre-phase\n\nLD T3\nOUT T4 K200               // T4 = 20.0 sec\nANI T4\nOUT M5                   // M5 = East-West green phase\n\nLD T4\nOUT T5 K20               // T5 = 2 sec\nANI T5\nOUT M6                   // M6 = East-West green blinking phase\n\nLD T5\nOUT T6 K40               // T6 = 4.0 sec\nANI T6\nOUT M7                   // M7 = East-West yellow phase\n\nLD T6\nOUT T7 K20               // T7 = 2.0 sec\nOUT M8                   // M8 = All-direction red pre-phase\n\n// North-South light output\nLD M1\nLD M2\nAND M8013                // Blinking pulse\nORB\nOUT Y000                 // North-South green light\n\nLD M3\nOUT Y001                 // North-South yellow light\n\nLD M4\nOR  M5\nOR  M6\nOR  M7\nOR  M8\nOUT Y002                 // North-South red light\n\n// East-West light output\nLD M5\nLD M6\nAND M8013\nORB\nOUT Y003                 // East-West green light\n\nLD M7\nOUT Y004                 // East-West yellow light\n\nLD M1\nOR  M2\nOR  M3\nOR  M4\nOR  M8\nOUT Y005                 // East-West red light\n\nEND                      // End of program\n"
    },
    {
        "question": "How to use Mitsubishi FX-series PLC IL instruction list to design a bidirectional traffic light control logic? Assume both North-South and East-West directions have green, yellow, and red light cycles, and there is a 2-second blinking warning before the green light ends.",
        "answer": "LD X000                  // Start button\nOR  M0\nANI X001                 // Stop button\nOUT M0                   // System start flag\n\nLD M0\nANI T7                   // Ensure not yet reached final timer\nOUT T0 K170               // T0 = 17.0 sec\nANI T0\nOUT M1                   // M1 = North-South green phase\n\nLD T0\nOUT T1 K20               // T1 = 2 sec\nANI T1\nOUT M2                   // M2 = North-South green blinking phase\n\nLD T1\nOUT T2 K50               // T2 = 5.0 sec\nANI T2\nOUT M3                   // M3 = North-South yellow phase\n\nLD T2\nOUT T3 K40               // T3 = 4.0 sec\nANI T3\nOUT M4                   // M4 = All-direction red pre-phase\n\nLD T3\nOUT T4 K170               // T4 = 17.0 sec\nANI T4\nOUT M5                   // M5 = East-West green phase\n\nLD T4\nOUT T5 K20               // T5 = 2 sec\nANI T5\nOUT M6                   // M6 = East-West green blinking phase\n\nLD T5\nOUT T6 K50               // T6 = 5.0 sec\nANI T6\nOUT M7                   // M7 = East-West yellow phase\n\nLD T6\nOUT T7 K40               // T7 = 4.0 sec\nOUT M8                   // M8 = All-direction red pre-phase\n\n// North-South light output\nLD M1\nLD M2\nAND M8013                // Blinking pulse\nORB\nOUT Y000                 // North-South green light\n\nLD M3\nOUT Y001                 // North-South yellow light\n\nLD M4\nOR  M5\nOR  M6\nOR  M7\nOR  M8\nOUT Y002                 // North-South red light\n\n// East-West light output\nLD M5\nLD M6\nAND M8013\nORB\nOUT Y003                 // East-West green light\n\nLD M7\nOUT Y004                 // East-West yellow light\n\nLD M1\nOR  M2\nOR  M3\nOR  M4\nOR  M8\nOUT Y005                 // East-West red light\n\nEND                      // End of program\n"
    },
    {
        "question": "How to use Mitsubishi FX-series PLC IL instruction list to design a bidirectional traffic light control logic? Assume both North-South and East-West directions have green, yellow, and red light cycles, and there is a 2-second blinking warning before the green light ends.",
        "answer": "LD X000                  // Start button\nOR  M0\nANI X001                 // Stop button\nOUT M0                   // System start flag\n\nLD M0\nANI T7                   // Ensure not yet reached final timer\nOUT T0 K240               // T0 = 24.0 sec\nANI T0\nOUT M1                   // M1 = North-South green phase\n\nLD T0\nOUT T1 K20               // T1 = 2 sec\nANI T1\nOUT M2                   // M2 = North-South green blinking phase\n\nLD T1\nOUT T2 K40               // T2 = 4.0 sec\nANI T2\nOUT M3                   // M3 = North-South yellow phase\n\nLD T2\nOUT T3 K20               // T3 = 2.0 sec\nANI T3\nOUT M4                   // M4 = All-direction red pre-phase\n\nLD T3\nOUT T4 K240               // T4 = 24.0 sec\nANI T4\nOUT M5                   // M5 = East-West green phase\n\nLD T4\nOUT T5 K20               // T5 = 2 sec\nANI T5\nOUT M6                   // M6 = East-West green blinking phase\n\nLD T5\nOUT T6 K40               // T6 = 4.0 sec\nANI T6\nOUT M7                   // M7 = East-West yellow phase\n\nLD T6\nOUT T7 K20               // T7 = 2.0 sec\nOUT M8                   // M8 = All-direction red pre-phase\n\n// North-South light output\nLD M1\nLD M2\nAND M8013                // Blinking pulse\nORB\nOUT Y000                 // North-South green light\n\nLD M3\nOUT Y001                 // North-South yellow light\n\nLD M4\nOR  M5\nOR  M6\nOR  M7\nOR  M8\nOUT Y002                 // North-South red light\n\n// East-West light output\nLD M5\nLD M6\nAND M8013\nORB\nOUT Y003                 // East-West green light\n\nLD M7\nOUT Y004                 // East-West yellow light\n\nLD M1\nOR  M2\nOR  M3\nOR  M4\nOR  M8\nOUT Y005                 // East-West red light\n\nEND                      // End of program\n"
    },
    {
        "question": "How to use Mitsubishi FX-series PLC IL instruction list to design a bidirectional traffic light control logic? Assume both North-South and East-West directions have green, yellow, and red light cycles, and there is a 2-second blinking warning before the green light ends.",
        "answer": "LD X000                  // Start button\nOR  M0\nANI X001                 // Stop button\nOUT M0                   // System start flag\n\nLD M0\nANI T7                   // Ensure not yet reached final timer\nOUT T0 K180               // T0 = 18.0 sec\nANI T0\nOUT M1                   // M1 = North-South green phase\n\nLD T0\nOUT T1 K20               // T1 = 2 sec\nANI T1\nOUT M2                   // M2 = North-South green blinking phase\n\nLD T1\nOUT T2 K40               // T2 = 4.0 sec\nANI T2\nOUT M3                   // M3 = North-South yellow phase\n\nLD T2\nOUT T3 K30               // T3 = 3.0 sec\nANI T3\nOUT M4                   // M4 = All-direction red pre-phase\n\nLD T3\nOUT T4 K180               // T4 = 18.0 sec\nANI T4\nOUT M5                   // M5 = East-West green phase\n\nLD T4\nOUT T5 K20               // T5 = 2 sec\nANI T5\nOUT M6                   // M6 = East-West green blinking phase\n\nLD T5\nOUT T6 K40               // T6 = 4.0 sec\nANI T6\nOUT M7                   // M7 = East-West yellow phase\n\nLD T6\nOUT T7 K30               // T7 = 3.0 sec\nOUT M8                   // M8 = All-direction red pre-phase\n\n// North-South light output\nLD M1\nLD M2\nAND M8013                // Blinking pulse\nORB\nOUT Y000                 // North-South green light\n\nLD M3\nOUT Y001                 // North-South yellow light\n\nLD M4\nOR  M5\nOR  M6\nOR  M7\nOR  M8\nOUT Y002                 // North-South red light\n\n// East-West light output\nLD M5\nLD M6\nAND M8013\nORB\nOUT Y003                 // East-West green light\n\nLD M7\nOUT Y004                 // East-West yellow light\n\nLD M1\nOR  M2\nOR  M3\nOR  M4\nOR  M8\nOUT Y005                 // East-West red light\n\nEND                      // End of program\n"
    },
    {
        "question": "How to use Mitsubishi FX-series PLC IL instruction list to design a bidirectional traffic light control logic? Assume both North-South and East-West directions have green, yellow, and red light cycles, and there is a 2-second blinking warning before the green light ends.",
        "answer": "LD X000                  // Start button\nOR  M0\nANI X001                 // Stop button\nOUT M0                   // System start flag\n\nLD M0\nANI T7                   // Ensure not yet reached final timer\nOUT T0 K60               // T0 = 6.0 sec\nANI T0\nOUT M1                   // M1 = North-South green phase\n\nLD T0\nOUT T1 K20               // T1 = 2 sec\nANI T1\nOUT M2                   // M2 = North-South green blinking phase\n\nLD T1\nOUT T2 K50               // T2 = 5.0 sec\nANI T2\nOUT M3                   // M3 = North-South yellow phase\n\nLD T2\nOUT T3 K40               // T3 = 4.0 sec\nANI T3\nOUT M4                   // M4 = All-direction red pre-phase\n\nLD T3\nOUT T4 K60               // T4 = 6.0 sec\nANI T4\nOUT M5                   // M5 = East-West green phase\n\nLD T4\nOUT T5 K20               // T5 = 2 sec\nANI T5\nOUT M6                   // M6 = East-West green blinking phase\n\nLD T5\nOUT T6 K50               // T6 = 5.0 sec\nANI T6\nOUT M7                   // M7 = East-West yellow phase\n\nLD T6\nOUT T7 K40               // T7 = 4.0 sec\nOUT M8                   // M8 = All-direction red pre-phase\n\n// North-South light output\nLD M1\nLD M2\nAND M8013                // Blinking pulse\nORB\nOUT Y000                 // North-South green light\n\nLD M3\nOUT Y001                 // North-South yellow light\n\nLD M4\nOR  M5\nOR  M6\nOR  M7\nOR  M8\nOUT Y002                 // North-South red light\n\n// East-West light output\nLD M5\nLD M6\nAND M8013\nORB\nOUT Y003                 // East-West green light\n\nLD M7\nOUT Y004                 // East-West yellow light\n\nLD M1\nOR  M2\nOR  M3\nOR  M4\nOR  M8\nOUT Y005                 // East-West red light\n\nEND                      // End of program\n"
    },
    {
        "question": "How to use Mitsubishi FX-series PLC IL instruction list to design a bidirectional traffic light control logic? Assume both North-South and East-West directions have green, yellow, and red light cycles, and there is a 2-second blinking warning before the green light ends.",
        "answer": "LD X000                  // Start button\nOR  M0\nANI X001                 // Stop button\nOUT M0                   // System start flag\n\nLD M0\nANI T7                   // Ensure not yet reached final timer\nOUT T0 K130               // T0 = 13.0 sec\nANI T0\nOUT M1                   // M1 = North-South green phase\n\nLD T0\nOUT T1 K20               // T1 = 2 sec\nANI T1\nOUT M2                   // M2 = North-South green blinking phase\n\nLD T1\nOUT T2 K40               // T2 = 4.0 sec\nANI T2\nOUT M3                   // M3 = North-South yellow phase\n\nLD T2\nOUT T3 K50               // T3 = 5.0 sec\nANI T3\nOUT M4                   // M4 = All-direction red pre-phase\n\nLD T3\nOUT T4 K130               // T4 = 13.0 sec\nANI T4\nOUT M5                   // M5 = East-West green phase\n\nLD T4\nOUT T5 K20               // T5 = 2 sec\nANI T5\nOUT M6                   // M6 = East-West green blinking phase\n\nLD T5\nOUT T6 K40               // T6 = 4.0 sec\nANI T6\nOUT M7                   // M7 = East-West yellow phase\n\nLD T6\nOUT T7 K50               // T7 = 5.0 sec\nOUT M8                   // M8 = All-direction red pre-phase\n\n// North-South light output\nLD M1\nLD M2\nAND M8013                // Blinking pulse\nORB\nOUT Y000                 // North-South green light\n\nLD M3\nOUT Y001                 // North-South yellow light\n\nLD M4\nOR  M5\nOR  M6\nOR  M7\nOR  M8\nOUT Y002                 // North-South red light\n\n// East-West light output\nLD M5\nLD M6\nAND M8013\nORB\nOUT Y003                 // East-West green light\n\nLD M7\nOUT Y004                 // East-West yellow light\n\nLD M1\nOR  M2\nOR  M3\nOR  M4\nOR  M8\nOUT Y005                 // East-West red light\n\nEND                      // End of program\n"
    },
    {
        "question": "Please write a traffic light control program for a crossroad using Mitsubishi FX-series PLC IL instruction list. The system is started by X0 and stopped by X1. Both North-South and East-West directions have green lights (with blinking before end), yellow lights, and red lights, switching alternately in a periodic cycle.",
        "answer": "LD X000                  // Start button\nOR  M0\nANI X001                 // Stop button\nOUT M0                   // System start flag\n\n// Stage 1: N-S Green\nLD M0\nANI T7                   // Ensure final timer not reached\nOUT T0 K120               // T0 = 12.0 sec (N-S Green)\nANI T0\nOUT M1                   // M1 = N-S Green Phase\n\n// N-S Green Blinking Before End\nLD T0\nOUT T1 K20               // T1 = 2 sec (blinking time)\nANI T1\nOUT M2                   // M2 = N-S Green Blinking Phase\n\n// Stage 2: N-S Yellow\nLD T1\nOUT T2 K50                // T2 = 5.0 sec (N-S Yellow)\nANI T2\nOUT M3                   // M3 = N-S Yellow Phase\n\n// Stage 3: N-S Red\nLD T2\nOUT T3 K50               // T3 = 5.0 sec (All Red between N-S → E-W)\nANI T3\nOUT M4                   // M4 = All Red Pre-Phase\n\n// Stage 4: E-W Green\nLD T3\nOUT T4 K120               // T4 = 12.0 sec (E-W Green)\nANI T4\nOUT M5                   // M5 = E-W Green Phase\n\n// E-W Green Blinking Before End\nLD T4\nOUT T5 K20               // T5 = 2 sec (blinking time)\nANI T5\nOUT M6                   // M6 = E-W Green Blinking Phase\n\n// Stage 5: E-W Yellow\nLD T5\nOUT T6 K50               // T6 = 5.0 sec (E-W Yellow)\nANI T6\nOUT M7                   // M7 = E-W Yellow Phase\n\n// Stage 6: E-W Red\nLD T6\nOUT T7 K50               // T7 = 5.0 sec (All Red between E-W → N-S)\nOUT M8                   // M8 = All Red Pre-Phase\n\n// N-S Light Output\nLD M1\nLD M2\nAND M8013                // Blinking pulse\nORB\nOUT Y000                 // N-S Green Light\n\nLD M3\nOUT Y001                 // N-S Yellow Light\n\nLD M4\nOR  M5\nOR  M6\nOR  M7\nOR  M8\nOUT Y002                 // N-S Red Light\n\n// E-W Light Output\nLD M5\nLD M6\nAND M8013\nORB\nOUT Y003                 // E-W Green Light\n\nLD M7\nOUT Y004                 // E-W Yellow Light\n\nLD M1\nOR  M2\nOR  M3\nOR  M4\nOR  M8\nOUT Y005                 // E-W Red Light\n\nEND                      // End of program\n"
    },
    {
        "question": "Please write a traffic light control program for a crossroad using Mitsubishi FX-series PLC IL instruction list. The system is started by X0 and stopped by X1. Both North-South and East-West directions have green lights (with blinking before end), yellow lights, and red lights, switching alternately in a periodic cycle.",
        "answer": "LD X000                  // Start button\nOR  M0\nANI X001                 // Stop button\nOUT M0                   // System start flag\n\n// Stage 1: N-S Green\nLD M0\nANI T7                   // Ensure final timer not reached\nOUT T0 K210               // T0 = 21.0 sec (N-S Green)\nANI T0\nOUT M1                   // M1 = N-S Green Phase\n\n// N-S Green Blinking Before End\nLD T0\nOUT T1 K20               // T1 = 2 sec (blinking time)\nANI T1\nOUT M2                   // M2 = N-S Green Blinking Phase\n\n// Stage 2: N-S Yellow\nLD T1\nOUT T2 K30                // T2 = 3.0 sec (N-S Yellow)\nANI T2\nOUT M3                   // M3 = N-S Yellow Phase\n\n// Stage 3: N-S Red\nLD T2\nOUT T3 K10               // T3 = 1.0 sec (All Red between N-S → E-W)\nANI T3\nOUT M4                   // M4 = All Red Pre-Phase\n\n// Stage 4: E-W Green\nLD T3\nOUT T4 K210               // T4 = 21.0 sec (E-W Green)\nANI T4\nOUT M5                   // M5 = E-W Green Phase\n\n// E-W Green Blinking Before End\nLD T4\nOUT T5 K20               // T5 = 2 sec (blinking time)\nANI T5\nOUT M6                   // M6 = E-W Green Blinking Phase\n\n// Stage 5: E-W Yellow\nLD T5\nOUT T6 K30               // T6 = 3.0 sec (E-W Yellow)\nANI T6\nOUT M7                   // M7 = E-W Yellow Phase\n\n// Stage 6: E-W Red\nLD T6\nOUT T7 K10               // T7 = 1.0 sec (All Red between E-W → N-S)\nOUT M8                   // M8 = All Red Pre-Phase\n\n// N-S Light Output\nLD M1\nLD M2\nAND M8013                // Blinking pulse\nORB\nOUT Y000                 // N-S Green Light\n\nLD M3\nOUT Y001                 // N-S Yellow Light\n\nLD M4\nOR  M5\nOR  M6\nOR  M7\nOR  M8\nOUT Y002                 // N-S Red Light\n\n// E-W Light Output\nLD M5\nLD M6\nAND M8013\nORB\nOUT Y003                 // E-W Green Light\n\nLD M7\nOUT Y004                 // E-W Yellow Light\n\nLD M1\nOR  M2\nOR  M3\nOR  M4\nOR  M8\nOUT Y005                 // E-W Red Light\n\nEND                      // End of program\n"
    },
    {
        "question": "Please write a traffic light control program for a crossroad using Mitsubishi FX-series PLC IL instruction list. The system is started by X0 and stopped by X1. Both North-South and East-West directions have green lights (with blinking before end), yellow lights, and red lights, switching alternately in a periodic cycle.",
        "answer": "LD X000                  // Start button\nOR  M0\nANI X001                 // Stop button\nOUT M0                   // System start flag\n\n// Stage 1: N-S Green\nLD M0\nANI T7                   // Ensure final timer not reached\nOUT T0 K140               // T0 = 14.0 sec (N-S Green)\nANI T0\nOUT M1                   // M1 = N-S Green Phase\n\n// N-S Green Blinking Before End\nLD T0\nOUT T1 K20               // T1 = 2 sec (blinking time)\nANI T1\nOUT M2                   // M2 = N-S Green Blinking Phase\n\n// Stage 2: N-S Yellow\nLD T1\nOUT T2 K50                // T2 = 5.0 sec (N-S Yellow)\nANI T2\nOUT M3                   // M3 = N-S Yellow Phase\n\n// Stage 3: N-S Red\nLD T2\nOUT T3 K30               // T3 = 3.0 sec (All Red between N-S → E-W)\nANI T3\nOUT M4                   // M4 = All Red Pre-Phase\n\n// Stage 4: E-W Green\nLD T3\nOUT T4 K140               // T4 = 14.0 sec (E-W Green)\nANI T4\nOUT M5                   // M5 = E-W Green Phase\n\n// E-W Green Blinking Before End\nLD T4\nOUT T5 K20               // T5 = 2 sec (blinking time)\nANI T5\nOUT M6                   // M6 = E-W Green Blinking Phase\n\n// Stage 5: E-W Yellow\nLD T5\nOUT T6 K50               // T6 = 5.0 sec (E-W Yellow)\nANI T6\nOUT M7                   // M7 = E-W Yellow Phase\n\n// Stage 6: E-W Red\nLD T6\nOUT T7 K30               // T7 = 3.0 sec (All Red between E-W → N-S)\nOUT M8                   // M8 = All Red Pre-Phase\n\n// N-S Light Output\nLD M1\nLD M2\nAND M8013                // Blinking pulse\nORB\nOUT Y000                 // N-S Green Light\n\nLD M3\nOUT Y001                 // N-S Yellow Light\n\nLD M4\nOR  M5\nOR  M6\nOR  M7\nOR  M8\nOUT Y002                 // N-S Red Light\n\n// E-W Light Output\nLD M5\nLD M6\nAND M8013\nORB\nOUT Y003                 // E-W Green Light\n\nLD M7\nOUT Y004                 // E-W Yellow Light\n\nLD M1\nOR  M2\nOR  M3\nOR  M4\nOR  M8\nOUT Y005                 // E-W Red Light\n\nEND                      // End of program\n"
    },
    {
        "question": "Please write a traffic light control program for a crossroad using Mitsubishi FX-series PLC IL instruction list. The system is started by X0 and stopped by X1. Both North-South and East-West directions have green lights (with blinking before end), yellow lights, and red lights, switching alternately in a periodic cycle.",
        "answer": "LD X000                  // Start button\nOR  M0\nANI X001                 // Stop button\nOUT M0                   // System start flag\n\n// Stage 1: N-S Green\nLD M0\nANI T7                   // Ensure final timer not reached\nOUT T0 K180               // T0 = 18.0 sec (N-S Green)\nANI T0\nOUT M1                   // M1 = N-S Green Phase\n\n// N-S Green Blinking Before End\nLD T0\nOUT T1 K20               // T1 = 2 sec (blinking time)\nANI T1\nOUT M2                   // M2 = N-S Green Blinking Phase\n\n// Stage 2: N-S Yellow\nLD T1\nOUT T2 K40                // T2 = 4.0 sec (N-S Yellow)\nANI T2\nOUT M3                   // M3 = N-S Yellow Phase\n\n// Stage 3: N-S Red\nLD T2\nOUT T3 K50               // T3 = 5.0 sec (All Red between N-S → E-W)\nANI T3\nOUT M4                   // M4 = All Red Pre-Phase\n\n// Stage 4: E-W Green\nLD T3\nOUT T4 K180               // T4 = 18.0 sec (E-W Green)\nANI T4\nOUT M5                   // M5 = E-W Green Phase\n\n// E-W Green Blinking Before End\nLD T4\nOUT T5 K20               // T5 = 2 sec (blinking time)\nANI T5\nOUT M6                   // M6 = E-W Green Blinking Phase\n\n// Stage 5: E-W Yellow\nLD T5\nOUT T6 K40               // T6 = 4.0 sec (E-W Yellow)\nANI T6\nOUT M7                   // M7 = E-W Yellow Phase\n\n// Stage 6: E-W Red\nLD T6\nOUT T7 K50               // T7 = 5.0 sec (All Red between E-W → N-S)\nOUT M8                   // M8 = All Red Pre-Phase\n\n// N-S Light Output\nLD M1\nLD M2\nAND M8013                // Blinking pulse\nORB\nOUT Y000                 // N-S Green Light\n\nLD M3\nOUT Y001                 // N-S Yellow Light\n\nLD M4\nOR  M5\nOR  M6\nOR  M7\nOR  M8\nOUT Y002                 // N-S Red Light\n\n// E-W Light Output\nLD M5\nLD M6\nAND M8013\nORB\nOUT Y003                 // E-W Green Light\n\nLD M7\nOUT Y004                 // E-W Yellow Light\n\nLD M1\nOR  M2\nOR  M3\nOR  M4\nOR  M8\nOUT Y005                 // E-W Red Light\n\nEND                      // End of program\n"
    },
    {
        "question": "Please write a traffic light control program for a crossroad using Mitsubishi FX-series PLC IL instruction list. The system is started by X0 and stopped by X1. Both North-South and East-West directions have green lights (with blinking before end), yellow lights, and red lights, switching alternately in a periodic cycle.",
        "answer": "LD X000                  // Start button\nOR  M0\nANI X001                 // Stop button\nOUT M0                   // System start flag\n\n// Stage 1: N-S Green\nLD M0\nANI T7                   // Ensure final timer not reached\nOUT T0 K50               // T0 = 5.0 sec (N-S Green)\nANI T0\nOUT M1                   // M1 = N-S Green Phase\n\n// N-S Green Blinking Before End\nLD T0\nOUT T1 K20               // T1 = 2 sec (blinking time)\nANI T1\nOUT M2                   // M2 = N-S Green Blinking Phase\n\n// Stage 2: N-S Yellow\nLD T1\nOUT T2 K30                // T2 = 3.0 sec (N-S Yellow)\nANI T2\nOUT M3                   // M3 = N-S Yellow Phase\n\n// Stage 3: N-S Red\nLD T2\nOUT T3 K50               // T3 = 5.0 sec (All Red between N-S → E-W)\nANI T3\nOUT M4                   // M4 = All Red Pre-Phase\n\n// Stage 4: E-W Green\nLD T3\nOUT T4 K50               // T4 = 5.0 sec (E-W Green)\nANI T4\nOUT M5                   // M5 = E-W Green Phase\n\n// E-W Green Blinking Before End\nLD T4\nOUT T5 K20               // T5 = 2 sec (blinking time)\nANI T5\nOUT M6                   // M6 = E-W Green Blinking Phase\n\n// Stage 5: E-W Yellow\nLD T5\nOUT T6 K30               // T6 = 3.0 sec (E-W Yellow)\nANI T6\nOUT M7                   // M7 = E-W Yellow Phase\n\n// Stage 6: E-W Red\nLD T6\nOUT T7 K50               // T7 = 5.0 sec (All Red between E-W → N-S)\nOUT M8                   // M8 = All Red Pre-Phase\n\n// N-S Light Output\nLD M1\nLD M2\nAND M8013                // Blinking pulse\nORB\nOUT Y000                 // N-S Green Light\n\nLD M3\nOUT Y001                 // N-S Yellow Light\n\nLD M4\nOR  M5\nOR  M6\nOR  M7\nOR  M8\nOUT Y002                 // N-S Red Light\n\n// E-W Light Output\nLD M5\nLD M6\nAND M8013\nORB\nOUT Y003                 // E-W Green Light\n\nLD M7\nOUT Y004                 // E-W Yellow Light\n\nLD M1\nOR  M2\nOR  M3\nOR  M4\nOR  M8\nOUT Y005                 // E-W Red Light\n\nEND                      // End of program\n"
    },
    {
        "question": "Please write a traffic light control program for a crossroad using Mitsubishi FX-series PLC IL instruction list. The system is started by X0 and stopped by X1. Both North-South and East-West directions have green lights (with blinking before end), yellow lights, and red lights, switching alternately in a periodic cycle.",
        "answer": "LD X000                  // Start button\nOR  M0\nANI X001                 // Stop button\nOUT M0                   // System start flag\n\n// Stage 1: N-S Green\nLD M0\nANI T7                   // Ensure final timer not reached\nOUT T0 K200               // T0 = 20.0 sec (N-S Green)\nANI T0\nOUT M1                   // M1 = N-S Green Phase\n\n// N-S Green Blinking Before End\nLD T0\nOUT T1 K20               // T1 = 2 sec (blinking time)\nANI T1\nOUT M2                   // M2 = N-S Green Blinking Phase\n\n// Stage 2: N-S Yellow\nLD T1\nOUT T2 K40                // T2 = 4.0 sec (N-S Yellow)\nANI T2\nOUT M3                   // M3 = N-S Yellow Phase\n\n// Stage 3: N-S Red\nLD T2\nOUT T3 K50               // T3 = 5.0 sec (All Red between N-S → E-W)\nANI T3\nOUT M4                   // M4 = All Red Pre-Phase\n\n// Stage 4: E-W Green\nLD T3\nOUT T4 K200               // T4 = 20.0 sec (E-W Green)\nANI T4\nOUT M5                   // M5 = E-W Green Phase\n\n// E-W Green Blinking Before End\nLD T4\nOUT T5 K20               // T5 = 2 sec (blinking time)\nANI T5\nOUT M6                   // M6 = E-W Green Blinking Phase\n\n// Stage 5: E-W Yellow\nLD T5\nOUT T6 K40               // T6 = 4.0 sec (E-W Yellow)\nANI T6\nOUT M7                   // M7 = E-W Yellow Phase\n\n// Stage 6: E-W Red\nLD T6\nOUT T7 K50               // T7 = 5.0 sec (All Red between E-W → N-S)\nOUT M8                   // M8 = All Red Pre-Phase\n\n// N-S Light Output\nLD M1\nLD M2\nAND M8013                // Blinking pulse\nORB\nOUT Y000                 // N-S Green Light\n\nLD M3\nOUT Y001                 // N-S Yellow Light\n\nLD M4\nOR  M5\nOR  M6\nOR  M7\nOR  M8\nOUT Y002                 // N-S Red Light\n\n// E-W Light Output\nLD M5\nLD M6\nAND M8013\nORB\nOUT Y003                 // E-W Green Light\n\nLD M7\nOUT Y004                 // E-W Yellow Light\n\nLD M1\nOR  M2\nOR  M3\nOR  M4\nOR  M8\nOUT Y005                 // E-W Red Light\n\nEND                      // End of program\n"
    },
    {
        "question": "Please write a traffic light control program for a crossroad using Mitsubishi FX-series PLC IL instruction list. The system is started by X0 and stopped by X1. Both North-South and East-West directions have green lights (with blinking before end), yellow lights, and red lights, switching alternately in a periodic cycle.",
        "answer": "LD X000                  // Start button\nOR  M0\nANI X001                 // Stop button\nOUT M0                   // System start flag\n\n// Stage 1: N-S Green\nLD M0\nANI T7                   // Ensure final timer not reached\nOUT T0 K200               // T0 = 20.0 sec (N-S Green)\nANI T0\nOUT M1                   // M1 = N-S Green Phase\n\n// N-S Green Blinking Before End\nLD T0\nOUT T1 K20               // T1 = 2 sec (blinking time)\nANI T1\nOUT M2                   // M2 = N-S Green Blinking Phase\n\n// Stage 2: N-S Yellow\nLD T1\nOUT T2 K30                // T2 = 3.0 sec (N-S Yellow)\nANI T2\nOUT M3                   // M3 = N-S Yellow Phase\n\n// Stage 3: N-S Red\nLD T2\nOUT T3 K40               // T3 = 4.0 sec (All Red between N-S → E-W)\nANI T3\nOUT M4                   // M4 = All Red Pre-Phase\n\n// Stage 4: E-W Green\nLD T3\nOUT T4 K200               // T4 = 20.0 sec (E-W Green)\nANI T4\nOUT M5                   // M5 = E-W Green Phase\n\n// E-W Green Blinking Before End\nLD T4\nOUT T5 K20               // T5 = 2 sec (blinking time)\nANI T5\nOUT M6                   // M6 = E-W Green Blinking Phase\n\n// Stage 5: E-W Yellow\nLD T5\nOUT T6 K30               // T6 = 3.0 sec (E-W Yellow)\nANI T6\nOUT M7                   // M7 = E-W Yellow Phase\n\n// Stage 6: E-W Red\nLD T6\nOUT T7 K40               // T7 = 4.0 sec (All Red between E-W → N-S)\nOUT M8                   // M8 = All Red Pre-Phase\n\n// N-S Light Output\nLD M1\nLD M2\nAND M8013                // Blinking pulse\nORB\nOUT Y000                 // N-S Green Light\n\nLD M3\nOUT Y001                 // N-S Yellow Light\n\nLD M4\nOR  M5\nOR  M6\nOR  M7\nOR  M8\nOUT Y002                 // N-S Red Light\n\n// E-W Light Output\nLD M5\nLD M6\nAND M8013\nORB\nOUT Y003                 // E-W Green Light\n\nLD M7\nOUT Y004                 // E-W Yellow Light\n\nLD M1\nOR  M2\nOR  M3\nOR  M4\nOR  M8\nOUT Y005                 // E-W Red Light\n\nEND                      // End of program\n"
    },
    {
        "question": "Please write a traffic light control program for a crossroad using Mitsubishi FX-series PLC IL instruction list. The system is started by X0 and stopped by X1. Both North-South and East-West directions have green lights (with blinking before end), yellow lights, and red lights, switching alternately in a periodic cycle.",
        "answer": "LD X000                  // Start button\nOR  M0\nANI X001                 // Stop button\nOUT M0                   // System start flag\n\n// Stage 1: N-S Green\nLD M0\nANI T7                   // Ensure final timer not reached\nOUT T0 K250               // T0 = 25.0 sec (N-S Green)\nANI T0\nOUT M1                   // M1 = N-S Green Phase\n\n// N-S Green Blinking Before End\nLD T0\nOUT T1 K20               // T1 = 2 sec (blinking time)\nANI T1\nOUT M2                   // M2 = N-S Green Blinking Phase\n\n// Stage 2: N-S Yellow\nLD T1\nOUT T2 K40                // T2 = 4.0 sec (N-S Yellow)\nANI T2\nOUT M3                   // M3 = N-S Yellow Phase\n\n// Stage 3: N-S Red\nLD T2\nOUT T3 K30               // T3 = 3.0 sec (All Red between N-S → E-W)\nANI T3\nOUT M4                   // M4 = All Red Pre-Phase\n\n// Stage 4: E-W Green\nLD T3\nOUT T4 K250               // T4 = 25.0 sec (E-W Green)\nANI T4\nOUT M5                   // M5 = E-W Green Phase\n\n// E-W Green Blinking Before End\nLD T4\nOUT T5 K20               // T5 = 2 sec (blinking time)\nANI T5\nOUT M6                   // M6 = E-W Green Blinking Phase\n\n// Stage 5: E-W Yellow\nLD T5\nOUT T6 K40               // T6 = 4.0 sec (E-W Yellow)\nANI T6\nOUT M7                   // M7 = E-W Yellow Phase\n\n// Stage 6: E-W Red\nLD T6\nOUT T7 K30               // T7 = 3.0 sec (All Red between E-W → N-S)\nOUT M8                   // M8 = All Red Pre-Phase\n\n// N-S Light Output\nLD M1\nLD M2\nAND M8013                // Blinking pulse\nORB\nOUT Y000                 // N-S Green Light\n\nLD M3\nOUT Y001                 // N-S Yellow Light\n\nLD M4\nOR  M5\nOR  M6\nOR  M7\nOR  M8\nOUT Y002                 // N-S Red Light\n\n// E-W Light Output\nLD M5\nLD M6\nAND M8013\nORB\nOUT Y003                 // E-W Green Light\n\nLD M7\nOUT Y004                 // E-W Yellow Light\n\nLD M1\nOR  M2\nOR  M3\nOR  M4\nOR  M8\nOUT Y005                 // E-W Red Light\n\nEND                      // End of program\n"
    },
    {
        "question": "Please write a traffic light control program for a crossroad using Mitsubishi FX-series PLC IL instruction list. The system is started by X0 and stopped by X1. Both North-South and East-West directions have green lights (with blinking before end), yellow lights, and red lights, switching alternately in a periodic cycle.",
        "answer": "LD X000                  // Start button\nOR  M0\nANI X001                 // Stop button\nOUT M0                   // System start flag\n\n// Stage 1: N-S Green\nLD M0\nANI T7                   // Ensure final timer not reached\nOUT T0 K120               // T0 = 12.0 sec (N-S Green)\nANI T0\nOUT M1                   // M1 = N-S Green Phase\n\n// N-S Green Blinking Before End\nLD T0\nOUT T1 K20               // T1 = 2 sec (blinking time)\nANI T1\nOUT M2                   // M2 = N-S Green Blinking Phase\n\n// Stage 2: N-S Yellow\nLD T1\nOUT T2 K50                // T2 = 5.0 sec (N-S Yellow)\nANI T2\nOUT M3                   // M3 = N-S Yellow Phase\n\n// Stage 3: N-S Red\nLD T2\nOUT T3 K40               // T3 = 4.0 sec (All Red between N-S → E-W)\nANI T3\nOUT M4                   // M4 = All Red Pre-Phase\n\n// Stage 4: E-W Green\nLD T3\nOUT T4 K120               // T4 = 12.0 sec (E-W Green)\nANI T4\nOUT M5                   // M5 = E-W Green Phase\n\n// E-W Green Blinking Before End\nLD T4\nOUT T5 K20               // T5 = 2 sec (blinking time)\nANI T5\nOUT M6                   // M6 = E-W Green Blinking Phase\n\n// Stage 5: E-W Yellow\nLD T5\nOUT T6 K50               // T6 = 5.0 sec (E-W Yellow)\nANI T6\nOUT M7                   // M7 = E-W Yellow Phase\n\n// Stage 6: E-W Red\nLD T6\nOUT T7 K40               // T7 = 4.0 sec (All Red between E-W → N-S)\nOUT M8                   // M8 = All Red Pre-Phase\n\n// N-S Light Output\nLD M1\nLD M2\nAND M8013                // Blinking pulse\nORB\nOUT Y000                 // N-S Green Light\n\nLD M3\nOUT Y001                 // N-S Yellow Light\n\nLD M4\nOR  M5\nOR  M6\nOR  M7\nOR  M8\nOUT Y002                 // N-S Red Light\n\n// E-W Light Output\nLD M5\nLD M6\nAND M8013\nORB\nOUT Y003                 // E-W Green Light\n\nLD M7\nOUT Y004                 // E-W Yellow Light\n\nLD M1\nOR  M2\nOR  M3\nOR  M4\nOR  M8\nOUT Y005                 // E-W Red Light\n\nEND                      // End of program\n"
    },
    {
        "question": "Please write a traffic light control program for a crossroad using Mitsubishi FX-series PLC IL instruction list. The system is started by X0 and stopped by X1. Both North-South and East-West directions have green lights (with blinking before end), yellow lights, and red lights, switching alternately in a periodic cycle.",
        "answer": "LD X000                  // Start button\nOR  M0\nANI X001                 // Stop button\nOUT M0                   // System start flag\n\n// Stage 1: N-S Green\nLD M0\nANI T7                   // Ensure final timer not reached\nOUT T0 K180               // T0 = 18.0 sec (N-S Green)\nANI T0\nOUT M1                   // M1 = N-S Green Phase\n\n// N-S Green Blinking Before End\nLD T0\nOUT T1 K20               // T1 = 2 sec (blinking time)\nANI T1\nOUT M2                   // M2 = N-S Green Blinking Phase\n\n// Stage 2: N-S Yellow\nLD T1\nOUT T2 K30                // T2 = 3.0 sec (N-S Yellow)\nANI T2\nOUT M3                   // M3 = N-S Yellow Phase\n\n// Stage 3: N-S Red\nLD T2\nOUT T3 K10               // T3 = 1.0 sec (All Red between N-S → E-W)\nANI T3\nOUT M4                   // M4 = All Red Pre-Phase\n\n// Stage 4: E-W Green\nLD T3\nOUT T4 K180               // T4 = 18.0 sec (E-W Green)\nANI T4\nOUT M5                   // M5 = E-W Green Phase\n\n// E-W Green Blinking Before End\nLD T4\nOUT T5 K20               // T5 = 2 sec (blinking time)\nANI T5\nOUT M6                   // M6 = E-W Green Blinking Phase\n\n// Stage 5: E-W Yellow\nLD T5\nOUT T6 K30               // T6 = 3.0 sec (E-W Yellow)\nANI T6\nOUT M7                   // M7 = E-W Yellow Phase\n\n// Stage 6: E-W Red\nLD T6\nOUT T7 K10               // T7 = 1.0 sec (All Red between E-W → N-S)\nOUT M8                   // M8 = All Red Pre-Phase\n\n// N-S Light Output\nLD M1\nLD M2\nAND M8013                // Blinking pulse\nORB\nOUT Y000                 // N-S Green Light\n\nLD M3\nOUT Y001                 // N-S Yellow Light\n\nLD M4\nOR  M5\nOR  M6\nOR  M7\nOR  M8\nOUT Y002                 // N-S Red Light\n\n// E-W Light Output\nLD M5\nLD M6\nAND M8013\nORB\nOUT Y003                 // E-W Green Light\n\nLD M7\nOUT Y004                 // E-W Yellow Light\n\nLD M1\nOR  M2\nOR  M3\nOR  M4\nOR  M8\nOUT Y005                 // E-W Red Light\n\nEND                      // End of program\n"
    },
    {
        "question": "How to write a self-holding start-stop program in Mitsubishi FX-series PLC IL instruction list?",
        "answer": "Input: X0 (Start), X1 (Stop)\nOutput: Y0 (Motor or Load)\nInternal Relay: M0 (Self-hold)\n\nInstruction List Code:\nLD     X0                  ; Press start button\nOR     M0\nOUT    M0                  ; Set M0 (self-hold)\nLD     X1                  ; Press stop button\nRST    M0                  ; Reset M0 (stop)\nLD     M0                  ; If M0 is ON\nOUT    Y0                  ; Relay Y0 energized (drives motor or load)\nEND                        ; End of program"
    },
    {
        "question": "How to write a forward-reverse motor control program with interlock protection using Mitsubishi FX-series PLC IL instruction list?",
        "answer": "Input: X0 (Forward), X1 (Reverse), X2 (Common Stop)\nOutput: Y0 (Forward), Y1 (Reverse)\nInternal Relays: M0 (Forward self-hold), M1 (Reverse self-hold)\n\nInstruction List Code:\nLD     X0                  ; Press forward button\nANI    Y1                  ; Interlocked with reverse output\nOUT    M0                  ; Set forward self-hold\nLD     X1                  ; Press reverse button\nANI    Y0                  ; Interlocked with forward output\nOUT    M1                  ; Set reverse self-hold\nLD     M0                  ; If forward self-hold\nOR     Y0                  ; Or already in forward mode\nANI    X2                  ; Stop button not pressed\nOUT    Y0                  ; Forward output\nLD     M1                  ; If reverse self-hold\nOR     Y1                  ; Or already in reverse mode\nANI    X2                  ; Stop button not pressed\nOUT    Y1                  ; Reverse output\nEND                        ; End of program"
    },
    {
        "question": "How to write an On-Delay program using Mitsubishi FX-series PLC IL instruction list?",
        "answer": "Input: X0 (Start)\nOutput: Y0 (Indicator or Load)\nTimer: T0 = 5 seconds (K50)\n\nInstruction List Code:\nLD     X0                  ; Press start button\nOUT    T0 K50              ; Start timer T0, 5 seconds\nLD     T0                  ; When T0 times out\nOUT    Y0                  ; Output Y0\nEND                        ; End of program"
    },
    {
        "question": "How to write an Off-Delay program using Mitsubishi FX-series PLC IL instruction list?",
        "answer": "Input: X0 (Button)\nOutput: Y0 (Indicator)\nTimer: T0 = 5 seconds (K50)\nInternal Relay: M0 (Hold the light ON)\n\nInstruction List Code:\nLD     X0                  ; Button is pressed\nOUT    M0                  ; Set M0\nLD     /X0                 ; Button released (X0 negated)\nOUT    T0 K50              ; Start 5-second timer\nLD     T0                  ; When timer expires\nRST    M0                  ; Turn off holding\nLD     M0                  ; As long as M0 is ON\nOUT    Y0                  ; Keep light ON\nEND                        ; End of program"
    },
    {
        "question": "How to write a blinking light control (alternating timer) using Mitsubishi FX-series PLC IL instruction list?",
        "answer": "Input: None\nOutput: Y0 (Blinking Light)\nTimers: T0, T1 (Alternating timing)\nInternal Relay: M0 (Blink control)\n\nInstruction List Code:\nLD     M8000               ; Always ON when PLC powered\nOUT    T0 K50              ; Start T0, 5 seconds\nLD     T0                  ; When T0 completes\nOUT    T1 K50              ; Start T1, 5 seconds\nLD     T1                  ; When T1 completes\nRST    T0                  ; Restart T0\nLD     T0                  ; While T0 is timing\nOUT    M0                  ; M0 represents blinking\nLD     M0                  ; If M0 is ON\nOUT    Y0                  ; Light ON\nEND                        ; End of program"
    },
    {
        "question": "How to write a two-motor interlock control (cannot run simultaneously) using Mitsubishi FX-series PLC IL instruction list?",
        "answer": "Input: X0 (Motor 1 Start), X1 (Motor 2 Start), X2 (Common Stop)\nOutput: Y0 (Motor 1), Y1 (Motor 2)\nInternal Relays: M0 (Motor 1 hold), M1 (Motor 2 hold)\n\nInstruction List Code:\nLD     X0                  ; Start Motor 1\nANI    Y1                  ; Motor 2 not running\nOUT    M0                  ; Hold Motor 1\nLD     X1                  ; Start Motor 2\nANI    Y0                  ; Motor 1 not running\nOUT    M1                  ; Hold Motor 2\nLD     M0                  ; Motor 1 held\nOR     Y0                  ; Or already running\nANI    X2                  ; Stop not pressed\nOUT    Y0\nLD     M1                  ; Motor 2 held\nOR     Y1                  ; Or already running\nANI    X2                  ; Stop not pressed\nOUT    Y1\nEND                        ; End of program"
    },
    {
        "question": "How to write an emergency stop (E-Stop) function using Mitsubishi FX-series PLC IL instruction list?",
        "answer": "Input: X0 (Normal Start), X1 (Emergency Stop)\nOutput: Y0 (Motor)\nInternal Relay: M0 (Hold)\n\nInstruction List Code:\nLD     X0                  ; Normal start\nSET    M0                  ; Set hold\nLD     X1                  ; Emergency stop\nRST    M0                  ; Immediately reset\nLD     M0                  ; If M0 is still ON\nOUT    Y0                  ; Motor runs\nEND                        ; End of program"
    },
    {
        "question": "How to write a Toggle switch (single-button ON/OFF) using Mitsubishi FX-series PLC IL instruction list?",
        "answer": "Input: X0 (Button)\nOutput: Y0 (Light)\nInternal Relays: M0 (Rising Edge), M1 (State Hold)\n\nInstruction List Code:\nLD     X0                  ; Monitor X0\nPLS    M0                  ; Rising edge trigger\nLD     M0                  ; If rising edge\nINV    M1                  ; Invert M1\nOUT    M1                  ; Update state\nLD     M1                  ; If M1 is ON\nOUT    Y0                  ; Light ON\nEND                        ; End of program"
    },
    {
        "question": "How to write a counter control program to perform an action after counting using Mitsubishi FX-series PLC IL instruction list?",
        "answer": "Input: X0 (Product Sensor)\nOutput: Y0 (Output when target count is reached)\nCounter: C0 (K10)\n\nInstruction List Code:\nLD     X0                  ; Product detected\nOUT    C0 K10              ; Count up to 10\nLD     C0                  ; When count = 10\nOUT    Y0                  ; Trigger output\nRST    C0                  ; Reset counter\nEND                        ; End of program"
    },
    {
        "question": "How to write a 'simple 2-step sequence' control program using Mitsubishi FX-series PLC IL instruction list?",
        "answer": "Input: X0 (Start), X1 (Step Toggle)\nOutput: Y0 (Step 1), Y1 (Step 2)\nInternal Relays: M0 (Step 1), M1 (Step 2)\n\nInstruction List Code:\nLD     X0                  ; Press start\nSET    M0                  ; Enter Step 1\nLD     M0                  ; Step 1 active\nOUT    Y0                  ; Output Step 1\nLD     X1                  ; Toggle\nRST    M0                  ; Exit Step 1\nSET    M1                  ; Enter Step 2\nLD     M1                  ; Step 2 active\nOUT    Y1                  ; Output Step 2\nLD     X1                  ; Toggle again\nRST    M1                  ; Exit Step 2\nSET    M0                  ; Return to Step 1\nEND                        ; End of program"
    },
    {
        "question": "How to use Mitsubishi FX-series PLC IL instruction list to control delayed light startup with a timer (On-Delay)?",
        "answer": "Input: X0 = Start Button\nOutput: Y0 = Light\nTimer: T0 = 5 seconds (K50)\n\nInstruction List Code:\nLD     X0                  ; When the start button is pressed\nOUT    T0 K50              ; Start timer T0 for 5 seconds\nLD     T0                  ; When T0 times out\nOUT    Y0                  ; Turn on light\nEND                        ; End of program"
    },
    {
        "question": "How to use Mitsubishi FX-series PLC IL instruction list to control delayed light off with a timer (Off-Delay)?",
        "answer": "Input: X0 = Button\nOutput: Y0 = Light\nTimer: T0 = 3 seconds (K30)\nInternal Relay: M0 = Light Hold\n\nInstruction List Code:\nLD     X0                  ; Press the button\nOUT    M0                  ; Set M0\nLD     /X0                 ; Button released (X0 negated)\nOUT    T0 K30              ; Delay 3 seconds\nLD     T0                  ; After 3 seconds\nRST    M0                  ; Cancel hold\nLD     M0                  ; If M0 is still ON\nOUT    Y0                  ; Keep light ON\nEND                        ; End of program"
    },
    {
        "question": "How to use Mitsubishi FX-series PLC IL instruction list to generate a blinking light using two alternating timers?",
        "answer": "Input: None\nOutput: Y0 = Blinking Light\nTimers: T0, T1 (Alternating)\nInternal Relay: M0 = Blink Control\n\nInstruction List Code:\nLD     M8000               ; Always ON when PLC is powered\nOUT    T0 K50              ; Start T0, 5 seconds\nLD     T0                  ; When T0 ends\nOUT    T1 K50              ; Start T1, 5 seconds\nLD     T1                  ; When T1 ends\nRST    T0                  ; Reset T0\nLD     T0                  ; While T0 is active\nOUT    M0                  ; Set M0\nLD     M0                  ; If M0 is ON\nOUT    Y0                  ; Blink light ON\nEND                        ; End of program"
    },
    {
        "question": "How to use Mitsubishi FX-series PLC IL instruction list to output a one-shot pulse after detecting a button, with timer delay?",
        "answer": "Input: X0 = Button\nOutput: Y0 = One-shot Pulse\nTimer: T0 = 0.5 seconds (K5)\nInternal Relay: M0 = Pulse Hold\n\nInstruction List Code:\nLD     X0                  ; Press button\nOUT    M0                  ; Set M0\nLD     M0                  ; If M0 is ON\nOUT    T0 K5               ; Set T0 = 0.5 seconds\nLD     T0                  ; When T0 times out\nRST    M0                  ; Reset M0\nLD     M0                  ; While M0 is ON\nOUT    Y0                  ; Output one-shot\nEND                        ; End of program"
    },
    {
        "question": "How to use Mitsubishi FX-series PLC IL instruction list to perform multi-stage sequence control (e.g., two stages) with timers?",
        "answer": "Input: X0 = Start\nOutput: Y0 = Stage 1, Y1 = Stage 2\nTimers: T0 = 5 seconds (K50), T1 = 3 seconds (K30)\nInternal Relays: M0 = Stage 1, M1 = Stage 2\n\nInstruction List Code:\nLD     X0                  ; Press start\nSET    M0                  ; Enter stage 1\nLD     M0                  ; If in stage 1\nOUT    Y0                  ; Output Y0\nOUT    T0 K50              ; Set timer 5 seconds\nLD     T0                  ; When time up\nRST    M0                  ; End stage 1\nSET    M1                  ; Enter stage 2\nLD     M1                  ; If in stage 2\nOUT    Y1                  ; Output Y1\nOUT    T1 K30              ; Set timer 3 seconds\nLD     T1                  ; When time up\nRST    M1                  ; End stage 2\nEND                        ; End of program"
    },
    {
        "question": "How to use Mitsubishi FX-series PLC IL instruction list to compare Timer value and output when a set time is reached?",
        "answer": "Input: X0 = Start\nOutput: Y0 = Output Action\nTimer: T0 = 10 seconds (K100)\n\nInstruction List Code:\nLD     X0                  ; Start\nOUT    T0 K100             ; 10-second timer\nLD     T0                  ; When 10 seconds passed\nOUT    Y0                  ; Output action\nEND                        ; End of program"
    },
    {
        "question": "How to use Mitsubishi FX-series PLC IL instruction list to delay output after reaching a set count?",
        "answer": "Input: X0 = Sensor (counts +1 per detection)\nOutput: Y0 = Delayed output after reaching count\nCounter: C0 = 5 (K5)\nTimer: T0 = 2 seconds (K20)\n\nInstruction List Code:\nLD     X0                  ; Each sensor detection +1\nOUT    C0 K5               ; Count to 5\nLD     C0                  ; When count = 5\nOUT    T0 K20              ; Delay 2 seconds\nLD     T0                  ; When timer ends\nOUT    Y0                  ; Execute action\nRST    C0                  ; Reset counter\nEND                        ; End of program"
    },
    {
        "question": "How to use the Down-Counter in Mitsubishi FX-series PLC IL instruction list to output a warning when count reaches 0?",
        "answer": "Input: X0 = Feed-in (each time -1), X1 = Load preset\nOutput: Y0 = Warning or alert\nCounter: C1 = Down-Counter (K10)\n\nInstruction List Code:\nLD     X1                  ; When pressed\nMOV    K10 C1              ; Load 10 into C1\nLD     X0                  ; Each material detected\nCD     C1                  ; Down-Counter -1\nLD =   C1 K0               ; If C1 = 0\nOUT    Y0                  ; Output warning\nEND                        ; End of program"
    },
    {
        "question": "How to use Mitsubishi FX-series PLC IL instruction list with an Up-Down Counter to handle increment/decrement simultaneously?",
        "answer": "Input: X0 = Count Up, X1 = Count Down\nOutput: Y0 = Reached Upper Limit, Y1 = Reached Lower Limit\nCounter: C2 (Up-Down shared), Upper limit K10\n\nInstruction List Code:\nLD     X0                  ; Count up\nOUT    CU C2 K10           ; Up-Counter\nLD     X1                  ; Count down\nOUT    CD C2               ; Down-Counter\nLD =   C2 K10              ; If reached 10\nOUT    Y0                  ; Upper limit\nLD =   C2 K0               ; If reached 0\nOUT    Y1                  ; Lower limit\nEND                        ; End of program"
    },
    {
        "question": "How to combine Timer and Counter in Mitsubishi FX-series PLC IL instruction list for mixed control (e.g., flash after counting)?",
        "answer": "Input: X0 = Start Button, X1 = Product Sensor\nOutput: Y0 = Blinking Light\nCounter: C0 = 5\nTimers: T0, T1 (2 seconds alternating)\nInternal Relay: M0 = Blink State\n\nInstruction List Code:\nLD     X0                  ; Press start\nOUT    M0                  ; Set M0 = blinking state\nLD     X1                  ; Product detected\nOUT    C0 K5               ; Count to 5\nLD     C0                  ; When reached 5\nOUT    T0 K20              ; Timer 2 sec\nLD     T0                  ; When done\nOUT    T1 K20              ; Another 2 sec\nLD     T1                  ; When done\nRST    T0                  ; Restart T0\nLD     T0\nAND    M0                  ; While in blinking state\nOUT    Y0                  ; Light blinks\nEND                        ; End of program"
    },
    {
        "question": "How does the LD instruction load an input state?",
        "answer": "Example code:\n```\nLD X0\n```\n\nExplanation: LD reads the ON/OFF status of X0 as the starting condition for subsequent logic."
    },
    {
        "question": "Which elements can the LD instruction be used with?",
        "answer": "Example code:\n```\nLD M100\n```\n\nExplanation: Besides X inputs, LD can load the status of boolean elements such as M, Y, S, etc."
    },
    {
        "question": "How do LD and OUT work together to control an output?",
        "answer": "Example code:\n```\nLD X1\nOUT Y0\n```\n\nExplanation: When X1 is ON, Y0 is driven ON; when X1 is OFF, Y0 is turned OFF."
    },
    {
        "question": "What is the purpose of using LD in the first line of a program?",
        "answer": "Example code:\n```\nLD X10\n```\n\nExplanation: It sets X10’s status as the initial condition for that network’s logic."
    },
    {
        "question": "Can LD directly detect a specific scan state?",
        "answer": "Example code:\n```\nLD X5\n```\n\nExplanation: LD only reads the current scan’s TRUE/FALSE state. For edge detection, use LDP or LDF."
    },
    {
        "question": "What does the LDI instruction do?",
        "answer": "Example code:\n```\nLDI X0\n```\n\nExplanation: LDI loads the inverse of X0. When X0=OFF, the condition is TRUE; when X0=ON, it is FALSE."
    },
    {
        "question": "What is the difference between LDI and LD?",
        "answer": "Example code:\n```\nLD X0\nLDI X1\n```\n\nExplanation: LD loads the direct status; LDI loads the inverted status."
    },
    {
        "question": "How to use LDI to trigger only when an input is OFF?",
        "answer": "Example code:\n```\nLDI X1\nOUT Y0\n```\n\nExplanation: Y0 turns ON only when X1=OFF, useful for safety door checks."
    },
    {
        "question": "Can LDI be combined with AND, OR, etc.?",
        "answer": "Example code:\n```\nLD X2\nANDI X3\nOUT Y1\n```\n\nExplanation: Yes. ANDI applies an inverted check on X3 only if the preceding condition is TRUE."
    },
    {
        "question": "Can LDI invert special flag bits?",
        "answer": "Example code:\n```\nLDI M8002\n```\n\nExplanation: Yes, any boolean element can be inverted with LDI."
    },
    {
        "question": "What does the LDP instruction detect?",
        "answer": "Example code:\n```\nLDP X0\n```\n\nExplanation: It detects the rising edge (OFF→ON) of X0 and generates a single-scan pulse."
    },
    {
        "question": "How does LDP differ from LD?",
        "answer": "Example code:\n```\nLD X1\nLDP X1\n```\n\nExplanation: LD continuously reads X1; LDP is TRUE only at the instant X1 transitions from OFF to ON."
    },
    {
        "question": "How to use LDP for one-shot button triggering?",
        "answer": "Example code:\n```\nLDP X2\nOUT M0\n```\n\nExplanation: M0 is set ON only during the scan when X2 goes from OFF to ON."
    },
    {
        "question": "How to detect rising edges on two different inputs simultaneously?",
        "answer": "Example code:\n```\nLDP X3\nOUT M10\nLDP X4\nOUT M11\n```\n\nExplanation: Use separate networks for each LDP to detect each input’s rising edge."
    },
    {
        "question": "Can LDP be used with a timer for one-shot start?",
        "answer": "Example code:\n```\nLDP X5\nOUT T0 K100\n```\n\nExplanation: Yes. T0 starts on the rising edge of X5, and X5 held ON won’t retrigger."
    },
    {
        "question": "What does the LDF instruction detect?",
        "answer": "Example code:\n```\nLDF X0\n```\n\nExplanation: It detects the falling edge (ON→OFF) of X0 and is TRUE for that single scan."
    },
    {
        "question": "How does LDF differ from LDP?",
        "answer": "Example code:\n```\nLDP X0\nLDF X0\n```\n\nExplanation: LDP detects rising edges; LDF detects falling edges, each generating a single-scan pulse."
    },
    {
        "question": "How to act at the moment a button is released?",
        "answer": "Example code:\n```\nLDF X1\nOUT M20\n```\n\nExplanation: M20 is set when X1 transitions from ON to OFF, detecting a button release."
    },
    {
        "question": "Can LDF be used with a timer?",
        "answer": "Example code:\n```\nLDF X2\nOUT T1 K30\n```\n\nExplanation: Yes. T1 starts on the falling edge of X2 and won’t retrigger if X2 stays OFF."
    },
    {
        "question": "Can the same input use both LDP and LDF?",
        "answer": "Example code:\n```\nLDP X3\nOUT M30\nLDF X3\nOUT M31\n```\n\nExplanation: Yes—one detects OFF→ON, the other ON→OFF, each triggering once."
    },
    {
        "question": "How does the AND instruction perform logical AND?",
        "answer": "Example code:\n```\nLD X0\nAND X1\nOUT Y0\n```\n\nExplanation: Loads X0=ON, then ANDs with X1. Y0 turns ON only if both are ON."
    },
    {
        "question": "What is the relationship between AND and LD?",
        "answer": "Example code:\n```\nLD X0\nAND X1\n```\n\nExplanation: LD loads the first condition; AND adds another condition to be ANDed."
    },
    {
        "question": "Can multiple AND conditions be chained?",
        "answer": "Example code:\n```\nLD X0\nAND X1\nAND X2\nOUT Y0\n```\n\nExplanation: Yes—ALL conditions must be ON for the final result to be TRUE."
    },
    {
        "question": "Can AND be used with different element types (X, M, S)?",
        "answer": "Example code:\n```\nLD M10\nAND X5\nAND S20\nOUT Y10\n```\n\nExplanation: Yes—any boolean element type can be ANDed."
    },
    {
        "question": "What if any AND condition is OFF?",
        "answer": "Example code:\n```\nLD X0\nAND X1\nOUT Y0\n```\n\nExplanation: If either X0 or X1 is OFF, the final result is FALSE and Y0 stays OFF."
    },
    {
        "question": "What does the ANI instruction do?",
        "answer": "Example code:\n```\nLD X0\nANI X1\nOUT Y0\n```\n\nExplanation: ANI performs AND with the inverse of X1. The condition remains TRUE only if X1=OFF."
    },
    {
        "question": "What is the difference between ANI and LDI?",
        "answer": "Example code:\n```\nLDI X1\nANI X1\n```\n\nExplanation: LDI inverts at load; ANI inverts only during the AND check."
    },
    {
        "question": "How to check X0=ON and X1=OFF together?",
        "answer": "Example code:\n```\nLD X0\nANI X1\nOUT Y0\n```\n\nExplanation: Y0 turns ON only if X0=ON AND X1=OFF."
    },
    {
        "question": "Can multiple ANI instructions be chained?",
        "answer": "Example code:\n```\nLD X0\nANI X1\nANI X2\nOUT Y5\n```\n\nExplanation: Yes—X0 must be ON, X1 and X2 both OFF for Y5 to turn ON."
    },
    {
        "question": "How to mix ANI and normal AND?",
        "answer": "Example code:\n```\nLD X0\nAND X1\nANI X2\nOUT Y0\n```\n\nExplanation: Checks X0=ON AND X1=ON, then X2=OFF before Y0 turns ON."
    },
    {
        "question": "What is the ANDP instruction used for?",
        "answer": "Example code:\n```\nLD X0\nANDP X1\nOUT Y0\n```\n\nExplanation: When X0=ON, ANDP detects the rising edge of X1 (OFF→ON) once."
    },
    {
        "question": "How does ANDP differ from LDP?",
        "answer": "Example code:\n```\nLD X2\nLDP X3\nANDP X4\n```\n\nExplanation: LDP detects X3’s rising edge independently; ANDP requires the prior condition TRUE then detects X4’s rising edge."
    },
    {
        "question": "Does ANDP keep detecting X1=ON?",
        "answer": "Example code:\n```\nLD M10\nANDP X1\nOUT Y0\n```\n\nExplanation: It triggers only once at the moment X1 goes from OFF to ON."
    },
    {
        "question": "Can multiple ANDP be chained?",
        "answer": "Example code:\n```\nLD X0\nANDP X1\nANDP X2\nOUT Y5\n```\n\nExplanation: X0=ON, then rising edges of X1 and X2 each trigger once—possible but complex."
    },
    {
        "question": "How to use ANDP with a counter?",
        "answer": "Example code:\n```\nLD M20\nANDP X3\nOUT C0 K10\n```\n\nExplanation: When M20=ON, each rising edge of X3 increments counter C0 by 1."
    },
    {
        "question": "What does the ANDF instruction detect?",
        "answer": "Example code:\n```\nLD X0\nANDF X1\nOUT Y0\n```\n\nExplanation: When X0=ON, ANDF detects X1’s falling edge (ON→OFF) once."
    },
    {
        "question": "How does ANDF differ from LDF?",
        "answer": "Example code:\n```\nLD X2\nLDF X3\nANDF X4\n```\n\nExplanation: LDF independently detects X3’s falling edge; ANDF requires the prior condition TRUE then detects X4’s falling edge."
    },
    {
        "question": "Can ANDF chain multiple inputs?",
        "answer": "Example code:\n```\nLD X0\nANDF X1\nANDF X2\nOUT Y5\n```\n\nExplanation: X0=ON, then both X1 and X2 must each go ON→OFF to trigger Y5."
    },
    {
        "question": "What is the difference between ANDF and ANDP?",
        "answer": "Example code:\n```\nLD X0\nANDP X1\nANDF X2\n```\n\nExplanation: ANDP detects rising edges; ANDF detects falling edges, both requiring the prior condition TRUE."
    },
    {
        "question": "Can ANDF be combined with pulse M8013?",
        "answer": "Example code:\n```\nLD M8013\nANDF X10\nOUT M60\n```\n\nExplanation: Yes—but only when M8013=ON and X10 transitions ON→OFF in that scan will M60 trigger."
    },
    {
        "question": "How does the OR instruction perform logical OR?",
        "answer": "Example code:\n```\nLD X0\nOR X1\nOUT Y0\n```\n\nExplanation: Y0 turns ON if either X0 or X1 is ON."
    },
    {
        "question": "Can OR be used repeatedly?",
        "answer": "Example code:\n```\nLD X0\nOR X1\nOR X2\nOUT Y0\n```\n\nExplanation: Yes—Y0 turns ON if any of X0, X1, or X2 is ON."
    },
    {
        "question": "How to mix OR and AND?",
        "answer": "Example code:\n```\nLD X0\nAND X1\nOR X2\nOUT Y0\n```\n\nExplanation: (X0 AND X1) OR X2; Y0 turns ON if X0&X1 are both ON or X2=ON."
    },
    {
        "question": "What is the execution order of OR?",
        "answer": "Example code:\n```\nLD X0\nOR X1\nAND X2\n```\n\nExplanation: First (X0 OR X1), then AND X2—executed line by line."
    },
    {
        "question": "How does OR differ from OUT?",
        "answer": "Example code:\n```\nLD X3\nOR X4\nOUT Y1\n```\n\nExplanation: OR is a logical instruction; OUT is the final output instruction that drives the element."
    },
    {
        "question": "What does the ORI instruction do?",
        "answer": "Example code:\n```\nLD X0\nORI X1\nOUT Y0\n```\n\nExplanation: ORI ORs the inverse of X1 (X1=OFF) with the preceding condition."
    },
    {
        "question": "What is the difference between ORI and LDI?",
        "answer": "Example code:\n```\nLDI X2\nORI X3\n```\n\nExplanation: LDI inverts at load; ORI inverts only for the OR comparison."
    },
    {
        "question": "Can ORI handle multiple conditions?",
        "answer": "Example code:\n```\nLD X0\nORI X1\nORI X2\nOUT Y10\n```\n\nExplanation: Y10 turns ON if X0=ON or X1=OFF or X2=OFF."
    },
    {
        "question": "How to mix ORI with normal OR?",
        "answer": "Example code:\n```\nLD X3\nORI X4\nOR X5\nOUT Y20\n```\n\nExplanation: Equivalent to (X3 OR (NOT X4)) OR X5."
    },
    {
        "question": "When is ORI typically used?",
        "answer": "Example code:\n```\nLD M0\nORI X6\nOUT Y1\n```\n\nExplanation: Used for safety conditions—Y1 ON if M0=ON or X6=OFF."
    },
    {
        "question": "What does the ORP instruction detect?",
        "answer": "Example code:\n```\nLD X0\nORP X1\nOUT Y0\n```\n\nExplanation: When X0=ON, ORP detects the rising edge of X1 (OFF→ON) in that scan."
    },
    {
        "question": "How does ORP differ from LDP?",
        "answer": "Example code:\n```\nLD X2\nLDP X3\nORP X4\n```\n\nExplanation: LDP detects X3’s rising edge independently; ORP requires the prior condition TRUE then detects X4’s rising edge."
    },
    {
        "question": "Does ORP stay ON continuously?",
        "answer": "Example code:\n```\nLD M10\nORP X1\nOUT Y5\n```\n\nExplanation: No—it’s TRUE only on the scan when X1 goes from OFF to ON."
    },
    {
        "question": "Can ORP be used on two different inputs simultaneously?",
        "answer": "Example code:\n```\nLD X0\nORP X1\nORP X2\nOUT Y6\n```\n\nExplanation: Yes—while X0=ON, rising edges of X1 or X2 each trigger once."
    },
    {
        "question": "Can ORP start a one-shot timer?",
        "answer": "Example code:\n```\nLD M20\nORP X3\nOUT T0 K50\n```\n\nExplanation: When M20=ON, a rising edge on X3 starts T0 for one pulse."
    },
    {
        "question": "When is the ORF instruction used?",
        "answer": "Example code:\n```\nLD M0\nORF X0\nOUT Y0\n```\n\nExplanation: While M0=ON, ORF detects X0’s falling edge (ON→OFF) once."
    },
    {
        "question": "How does ORF differ from LDF?",
        "answer": "Example code:\n```\nLDF X1\nORF X2\n```\n\nExplanation: LDF independently detects X1’s falling edge; ORF requires the prior condition TRUE then detects X2’s falling edge."
    },
    {
        "question": "Can ORF be used for a button release action?",
        "answer": "Example code:\n```\nLD X3\nORF X4\nOUT M10\n```\n\nExplanation: If X3=ON, when X4 goes ON→OFF, M10 triggers once."
    },
    {
        "question": "Does ORF hold the output ON?",
        "answer": "Example code:\n```\nLD M20\nORF X5\nOUT Y10\n```\n\nExplanation: No—it’s TRUE only on the scan when X5 falls."
    },
    {
        "question": "Can multiple ORF be chained?",
        "answer": "Example code:\n```\nLD X0\nORF X1\nORF X2\nOUT Y5\n```\n\nExplanation: Yes—each falling edge on X1 or X2 triggers Y5 if X0=ON."
    },
    {
        "question": "When is the ORB instruction needed instead of a simple OR?",
        "answer": "Example: When two series groups need to be ORed.\n\nExplanation: For (X0 & X2) OR (X1 & X3), use ORB after each series block."
    },
    {
        "question": "How to use ORB for two series groups in parallel?",
        "answer": "Example code:\n```\nLD X0\nAND X2\nLD X1\nAND X3\nORB\nOR X4\nOUT Y0\n```\n\nExplanation: Series (X0&X2) and (X1&X3) are ORed by ORB, then OR X4."
    },
    {
        "question": "How to OR more than two series groups?",
        "answer": "Example: Use ORB after each group.\n\nExplanation: You can chain ORB multiple times, but Mitsubishi often limits to 8."
    },
    {
        "question": "Why can’t ORB be used indefinitely?",
        "answer": "Example: 10 ORBs in a row.\n\nExplanation: Most Mitsubishi PLCs limit ORB to 8; beyond that causes errors."
    },
    {
        "question": "Do you need ORB for a simple X0 OR X1?",
        "answer": "Example code:\n```\nLD X0\nOR X1\nOUT Y0\n```\n\nExplanation: No—simple parallel contacts use OR. ORB is for parallel blocks."
    },
    {
        "question": "What is the primary use of the ANB instruction?",
        "answer": "Example: After parallel groups, then series.\n\nExplanation: ANB combines a completed parallel block with additional series conditions."
    },
    {
        "question": "How to use ANB for a parallel group then series?",
        "answer": "Example code:\n```\nLD X0\nOR X1\nAND X2\nLDI X3\nOR X4\nORI X5\nANB\nOUT Y0\n```\n\nExplanation: After OR/parallel block, ANB ANDs with remaining conditions."
    },
    {
        "question": "How to chain multiple ANB groups?",
        "answer": "Example: Use ANB repeatedly.\n\nExplanation: You can chain ANB for complex block ANDing, but there’s a limit."
    },
    {
        "question": "How does ANB differ from AND?",
        "answer": "Example code:\n```\nLD X0\nAND X1\nOUT Y0\n```\n\nExplanation: AND is for simple series; ANB is for ANDing a parallel block."
    },
    {
        "question": "Do you need ANB for X0 OR X1 then AND X2?",
        "answer": "Example code:\n```\nLD X0\nOR X1\nAND X2\nOUT Y0\n```\n\nExplanation: No—simple OR then AND doesn’t require ANB."
    },
    {
        "question": "What is the purpose of the PLS instruction?",
        "answer": "Example code:\n```\nPLS X0\nOUT M0\n```\n\nExplanation: Detects X0’s rising edge (OFF→ON) and generates a one-scan pulse for M0."
    },
    {
        "question": "How does PLS differ from LDP?",
        "answer": "Example code:\n```\nPLS X1\nLDP X1\n```\n\nExplanation: Both detect rising edges; syntax differs by PLC model support."
    },
    {
        "question": "Can PLS be used for one-shot button triggers?",
        "answer": "Example code:\n```\nPLS X2\nOUT T0 K100\n```\n\nExplanation: Yes—when X2 goes OFF→ON, T0 is triggered once."
    },
    {
        "question": "Does PLS output continuously?",
        "answer": "Example code:\n```\nPLS X3\nOUT Y0\n```\n\nExplanation: No—only ON during the scan of X3’s rising edge."
    },
    {
        "question": "Can multiple PLS be used at once?",
        "answer": "Example code:\n```\nPLS X4\nOUT M10\nPLS X5\nOUT M11\n```\n\nExplanation: Yes—each PLS detects its own input’s rising edge."
    },
    {
        "question": "What edge does the PLF instruction detect?",
        "answer": "Example code:\n```\nPLF X0\nOUT M0\n```\n\nExplanation: Detects X0’s falling edge (ON→OFF) and generates a one-scan pulse."
    },
    {
        "question": "Is PLF similar to LDF?",
        "answer": "Example code:\n```\nPLF X1\nLDF X2\n```\n\nExplanation: Both detect falling edges; syntax and naming vary."
    },
    {
        "question": "When to use PLF for button release?",
        "answer": "Example code:\n```\nPLF X3\nOUT T1 K30\n```\n\nExplanation: X3 ON→OFF triggers T1 for one scan."
    },
    {
        "question": "Does PLF stay ON?",
        "answer": "Example code:\n```\nPLF X4\nOUT M1\n```\n\nExplanation: No—only ON during the scan of X4’s falling edge."
    },
    {
        "question": "Can PLF and PLS detect the same input?",
        "answer": "Example code:\n```\nPLS X5\nOUT M10\nPLF X5\nOUT M11\n```\n\nExplanation: Yes—one for rising edge, one for falling edge."
    },
    {
        "question": "How does the SET instruction latch a bit?",
        "answer": "Example code:\n```\nLD X0\nSET M100\n```\n\nExplanation: When X0=ON, M100 is set and remains ON until reset."
    },
    {
        "question": "What is the difference between SET and OUT?",
        "answer": "Example code:\n```\nLD X1\nSET Y0\n```\n\nExplanation: OUT follows input state; SET latches ON until an RST clears it."
    },
    {
        "question": "How to use SET for motor start hold?",
        "answer": "Example code:\n```\nLD X2\nSET Y5\n```\n\nExplanation: Pressing X2 sets Y5 ON and holds it."
    },
    {
        "question": "How to reset a SET bit?",
        "answer": "Example code:\n```\nLD X3\nRST Y5\n```\n\nExplanation: When X3=ON, Y5 is reset OFF."
    },
    {
        "question": "Can SET set multiple bits at once?",
        "answer": "Example code:\n```\nLD X4\nSET M10 M11\n```\n\nExplanation: Some models allow multiple bits in one SET; often split into lines."
    },
    {
        "question": "How does the RST instruction clear a bit?",
        "answer": "Example code:\n```\nLD X0\nRST M100\n```\n\nExplanation: When X0=ON, M100 is forced OFF."
    },
    {
        "question": "How to pair RST with SET?",
        "answer": "Example code:\n```\nLD X1\nSET M50\nLD X2\nRST M50\n```\n\nExplanation: X1=ON sets M50; X2=ON resets M50."
    },
    {
        "question": "Does RST follow input OFF?",
        "answer": "Example code:\n```\nLD X3\nRST Y0\n```\n\nExplanation: No—when X3=ON, Y0 is cleared immediately."
    },
    {
        "question": "Can RST clear multiple bits at once?",
        "answer": "Example code:\n```\nLD X4\nRST M10 M11 M12\n```\n\nExplanation: If supported, resets multiple bits in one line."
    },
    {
        "question": "How does RST differ from OUT?",
        "answer": "Example code:\n```\nLD X5\nOUT Y1\nRST Y1\n```\n\nExplanation: OUT drives according to conditions; RST forcibly clears regardless."
    },
    {
        "question": "What is the function of the MPS instruction?",
        "answer": "Example code:\n```\nLD X0\nMPS\n```\n\nExplanation: Pushes the current logic result (X0 state) onto the stack for MRD/MPP use."
    },
    {
        "question": "What is the relationship between MPS, MRD, and MPP?",
        "answer": "Example code:\n```\nLD X1\nMPS\nMRD\nMPP\n```\n\nExplanation: MPS pushes, MRD reads top without popping, MPP reads and pops the top—stack mechanism."
    },
    {
        "question": "Can MPS be used multiple times in a row?",
        "answer": "Example code:\n```\nLD X2\nMPS\nLD X3\nMPS\n```\n\nExplanation: Yes—pushes multiple levels; MPP pops each in turn."
    },
    {
        "question": "What if MRD/MPP are not used after MPS?",
        "answer": "Example code:\n```\nLD X4\nMPS\nLD X5\nOUT Y0\n```\n\nExplanation: Logic still works, but leftover stack entries may consume resources."
    },
    {
        "question": "When is MPS useful?",
        "answer": "Example: Complex multi-stage logic.\n\nExplanation: Stores intermediate conditions for later retrieval, reducing redundant checks."
    },
    {
        "question": "How does the MRD instruction work?",
        "answer": "Example code:\n```\nLD X0\nMPS\nMRD\nOUT Y0\n```\n\nExplanation: MRD reads the top of stack and combines it with current logic without popping."
    },
    {
        "question": "What is the difference between MRD and MPP?",
        "answer": "Example code:\n```\nMRD\nMPP\n```\n\nExplanation: MRD reads without removing; MPP reads and pops the top."
    },
    {
        "question": "Can you use MRD multiple times on the same top stack?",
        "answer": "Example code:\n```\n// After MPS\nLD X1\nMPS\n// Consecutive MRD\nMRD\nOUT Y10\nMRD\nOUT Y11\n```\n\nExplanation: Yes—MRD can read the same top until MPP pops it."
    },
    {
        "question": "Can MRD only read the top stack entry?",
        "answer": "Explanation: Yes—only the top can be read; pop it first to access deeper levels."
    },
    {
        "question": "How to combine MRD with AND/OR?",
        "answer": "Example code:\n```\nLD M10\nMPS\nLD X5\nMRD\nAND X6\nOUT Y0\n```\n\nExplanation: Push M10, then MRD reads it and ANDs with X6."
    },
    {
        "question": "What is the function of the MPP instruction?",
        "answer": "Example code:\n```\nLD X0\nMPS\nMPP\n```\n\nExplanation: MPP reads and pops the top of the stack, removing it afterward."
    },
    {
        "question": "How does MPP differ from MRD?",
        "answer": "Example code:\n```\nLD X1\nMPS\nMRD\nMPP\n```\n\nExplanation: MRD reads without popping; MPP reads and pops."
    },
    {
        "question": "When should MPP be used?",
        "answer": "Example code:\n```\nLD X2\nMPS\nLD X3\nMPP\n```\n\nExplanation: After multiple pushes, use MPP to restore or free the stack."
    },
    {
        "question": "Does MPP affect the next stack entry?",
        "answer": "Example code:\n```\nLD X4\nMPS\nLD X5\nMPS\nMPP\n```\n\nExplanation: Popping the top makes the next entry the new top."
    },
    {
        "question": "What if not all MPS have matching MPP?",
        "answer": "Explanation: Leftover stack entries may exhaust stack space, though logic still runs."
    },
    {
        "question": "What does the END instruction signify in a PLC program?",
        "answer": "Example code:\n```\nEND\n```\n\nExplanation: Marks the end of the main program; PLC returns to the scan start."
    },
    {
        "question": "What happens if END appears mid-program?",
        "answer": "Example code:\n```\nLD X0\nOUT Y0\nEND\nLD X1\nOUT Y1\n```\n\nExplanation: Code after END is not executed; END should be at the very end."
    },
    {
        "question": "What is the difference between FEND and END?",
        "answer": "Example code:\n```\nFEND\nEND\n```\n\nExplanation: FEND separates main and sub/interrupt routines; END ends the entire program."
    },
    {
        "question": "What if there is no END instruction?",
        "answer": "Explanation: Compilation may fail or the system may auto-insert END; it’s best to explicitly include it."
    },
    {
        "question": "Do subroutines or interrupts need END?",
        "answer": "Example code:\n```\nSUBROUTINE\n...program...\nEND\n```\n\nExplanation: Yes—each subroutine or interrupt also needs END."
    },
    {
        "question": "What is the state of M8000 when the PLC enters RUN mode?",
        "answer": "Example code:\n```\nLD M8000\nOUT Y0\n```\n\nExplanation: When the PLC is in RUN mode, M8000 remains ON, causing Y0 to be energized."
    },
    {
        "question": "How to use M8000 to determine if the program is running?",
        "answer": "Example code:\n```\nLD M8000\nAND X0\nOUT M10\n```\n\nExplanation: M10 is activated only when the PLC is in RUN (M8000=ON) and X0=ON."
    },
    {
        "question": "Can M8000 be used as a global start condition?",
        "answer": "Example code:\n```\nLD M8000\nOUT Y5\n```\n\nExplanation: Yes. In the main program, M8000 indicates the PLC is running, and Y5 can be used to signal the device is powered on."
    },
    {
        "question": "How to combine M8000 with the emergency stop function?",
        "answer": "Example code:\n```\nLD M8000\nAND X1  // X1 is the emergency stop button\nOUT Y10\n```\n\nExplanation: Y10 is activated only when the PLC is in RUN and the emergency stop button is not pressed."
    },
    {
        "question": "What happens to M8000 when the PLC switches to STOP mode?",
        "answer": "Example code:\n```\nLD M8000\nOUT Y0\n```\n\nExplanation: When the PLC leaves RUN mode, M8000 turns OFF, and Y0 turns OFF accordingly."
    },
    {
        "question": "What is the state of M8001 under PLC RUN mode?",
        "answer": "Example code:\n```\nLD M8001\nOUT Y0\n```\n\nExplanation: M8001 is the b-contact for RUN monitoring; when PLC is in RUN, M8001=OFF, so Y0 remains OFF."
    },
    {
        "question": "What is the difference between M8000 and M8001?",
        "answer": "Example code:\n```\nLD M8000\nOUT Y1\nLD M8001\nOUT Y2\n```\n\nExplanation: M8000 (a-contact) is ON in RUN; M8001 (b-contact) is OFF in RUN. They are complementary."
    },
    {
        "question": "How to use M8001 to create a condition that never becomes true?",
        "answer": "Example code:\n```\nLD M8001\nOUT M10\n```\n\nExplanation: In RUN mode M8001=OFF, so M10 is never driven. Useful to temporarily disable a program section."
    },
    {
        "question": "Does M8001 change state in STOP mode?",
        "answer": "Example code:\n```\nLD M8001\n```\n\nExplanation: Usually M8001 remains OFF in STOP mode; some models may differ, refer to the manual."
    },
    {
        "question": "Can M8001 be used instead of a NOP instruction?",
        "answer": "Example code:\n```\nLD M8001\nOUT Y5\n```\n\nExplanation: Yes. Using M8001 creates a network that never executes, similar to NOP."
    },
    {
        "question": "When is M8002 briefly ON?",
        "answer": "Example code:\n```\nLD M8002\nOUT M0\n```\n\nExplanation: M8002 is ON only during the first scan after PLC enters RUN, then automatically turns OFF."
    },
    {
        "question": "How to use M8002 for initial data reset?",
        "answer": "Example code:\n```\nLD M8002\nMOV K0 D0\nMOV K0 D1\n```\n\nExplanation: On the first RUN scan, D0 and D1 are reset to zero."
    },
    {
        "question": "How to reset outputs at startup using M8002?",
        "answer": "Example code:\n```\nLD M8002\nRST Y10 Y11\n```\n\nExplanation: On the first scan, Y10 and Y11 are reset to OFF for a safe startup state."
    },
    {
        "question": "Can M8002 be used with a timer?",
        "answer": "Example code:\n```\nLD M8002\nOUT T0 K100\n```\n\nExplanation: Triggers T0 timing when entering RUN, useful for startup delay sequences."
    },
    {
        "question": "Does M8002 remain ON after multiple scans?",
        "answer": "Example code:\n```\nLD M8002\nOUT Y0\n```\n\nExplanation: No. It’s only ON during the first RUN scan and OFF thereafter."
    },
    {
        "question": "What is the relationship between M8003 and M8002?",
        "answer": "Example code:\n```\nLD M8003\nOUT M10\n```\n\nExplanation: M8002 (a-contact) is ON on the first scan; M8003 (b-contact) is OFF on the first scan. They complement each other."
    },
    {
        "question": "When M8002=ON, what is the state of M8003?",
        "answer": "Example code:\n```\nLD M8002\nOUT M1\nLD M8003\nOUT M2\n```\n\nExplanation: On the initial scan M8002=ON and M8003=OFF, so M1=ON and M2=OFF."
    },
    {
        "question": "How to use M8003 to block startup actions?",
        "answer": "Example code:\n```\nLD M8003\nAND X0\nOUT Y10\n```\n\nExplanation: On the first scan M8003=OFF, preventing Y10 from driving. Later M8003=ON allows X0 to drive Y10."
    },
    {
        "question": "Can M8002 and M8003 be used together?",
        "answer": "Example code:\n```\nLD M8002\nOUT M20\nLD M8003\nOUT M21\n```\n\nExplanation: Yes. On the first scan M8002=ON, M8003=OFF; on the second scan M8002=OFF, M8003=ON."
    },
    {
        "question": "What if M8003 is not used?",
        "answer": "Example code:\n```\nLD M8003\n```\n\nExplanation: None. M8003 simply provides a b-contact for the initial scan; use as needed."
    },
    {
        "question": "When does M8004 turn ON?",
        "answer": "Example code:\n```\nLD M8004\nOUT Y0\n```\n\nExplanation: M8004 turns ON when the PLC detects an error, such as program or runtime faults."
    },
    {
        "question": "How to trigger an alarm using M8004?",
        "answer": "Example code:\n```\nLD M8004\nOUT Y10  // Warning lamp\nOUT BZ   // Buzzer (assumed flag)\n```\n\nExplanation: On error detection, the lamp and buzzer activate to alert maintenance."
    },
    {
        "question": "When does M8004 automatically turn OFF?",
        "answer": "Example code:\n```\nLD M8004\n```\n\nExplanation: M8004 resets to OFF only after the error is cleared and the PLC returns to normal."
    },
    {
        "question": "Can M8004 be combined with emergency stop?",
        "answer": "Example code:\n```\nLD M8004\nOR X1\nOUT M100\n```\n\nExplanation: M100 activates on error or emergency stop to shut down system power."
    },
    {
        "question": "If noise causes false errors, will M8004 flicker?",
        "answer": "Example code:\n```\nLD M8004\nOUT Y15\n```\n\nExplanation: If error is cleared quickly, M8004 may flicker; true errors keep it ON."
    },
    {
        "question": "When does M8005 turn ON?",
        "answer": "Example code:\n```\nLD M8005\nOUT Y0\n```\n\nExplanation: M8005 turns ON when the PLC detects battery voltage below the normal range."
    },
    {
        "question": "What to do if battery voltage is low?",
        "answer": "Example code:\n```\nLD M8005\nOUT M10\n```\n\nExplanation: Use M10 to drive a warning or log, reminding to replace the battery to avoid data loss."
    },
    {
        "question": "What happens to M8005 after PLC power-off?",
        "answer": "Example code:\n```\nLD M8005\n```\n\nExplanation: M8005 state follows hardware detection; if voltage remains low, it stays ON."
    },
    {
        "question": "Can M8005 be reset by program?",
        "answer": "Example code:\n```\nLD M8005\nRST M8005\n```\n\nExplanation: No. It’s hardware-controlled and cannot be reset by RST."
    },
    {
        "question": "What is the risk of not addressing low battery?",
        "answer": "Example code:\n```\nLD M8005\n```\n\nExplanation: Continued depletion may cause loss of register or clock data after power-off."
    },
    {
        "question": "What is the difference between M8006 and M8005?",
        "answer": "Example code:\n```\nLD M8006\nOUT Y0\n```\n\nExplanation: M8006 latches the low-voltage event, staying ON until manually or specifically cleared."
    },
    {
        "question": "How to clear the latch of M8006?",
        "answer": "Example code:\n```\nLD X0\nRST M8006\n```\n\nExplanation: Some models allow RST to clear; otherwise power cycle or battery replacement is required."
    },
    {
        "question": "Will M8005 ON and M8006 ON occur simultaneously?",
        "answer": "Example code:\n```\nLD M8005\nLD M8006\n```\n\nExplanation: Both can be ON on voltage drop; M8005 is real-time, M8006 is latched."
    },
    {
        "question": "Why is latch function needed for M8006?",
        "answer": "Example code:\n```\nLD M8006\nOUT M20\n```\n\nExplanation: Maintains warning even if voltage recovers, indicating a past event."
    },
    {
        "question": "When does M8006 return OFF?",
        "answer": "Example code:\n```\nLD M8006\nOUT Y5\n```\n\nExplanation: After hardware or program clears the latch, or power cycle then RST."
    },
    {
        "question": "When does M8007 turn ON?",
        "answer": "Example code:\n```\nLD M8007\nOUT Y0\n```\n\nExplanation: M8007 is ON when a power interruption is detected, indicating a voltage drop risk."
    },
    {
        "question": "What countermeasures can be taken using M8007?",
        "answer": "Example code:\n```\nLD M8007\nOUT M10\n```\n\nExplanation: On interruption, save critical data or stop operations to protect equipment."
    },
    {
        "question": "How does M8007 differ from general power-off detection?",
        "answer": "Example code:\n```\nLD M8007\n```\n\nExplanation: M8007 detects brief interruptions; longer outages use M8008."
    },
    {
        "question": "Is M8007 latched ON?",
        "answer": "Example code:\n```\nLD M8007\nOUT Y0\n```\n\nExplanation: Typically ON only during the interruption or briefly latched for one scan, depending on model."
    },
    {
        "question": "Does M8007 turn OFF after power recovers?",
        "answer": "Example code:\n```\nLD M8007\n```\n\nExplanation: Yes, it usually resets OFF once power is stable."
    },
    {
        "question": "How does M8008 differ from M8007?",
        "answer": "Example code:\n```\nLD M8008\nOUT M10\n```\n\nExplanation: M8008 detects longer power-off, while M8007 detects brief interruptions."
    },
    {
        "question": "How to use M8008 for safe data storage?",
        "answer": "Example code:\n```\nLD M8008\nMOV D0 D100\n```\n\nExplanation: When M8008=ON, immediately back up D0 to D100."
    },
    {
        "question": "Does M8008 remain ON during sustained outage?",
        "answer": "Example code:\n```\nLD M8008\n```\n\nExplanation: Yes, if PLC remains powered (e.g., via UPS), M8008 stays ON."
    },
    {
        "question": "Does M8008 reset OFF after power restores?",
        "answer": "Example code:\n```\nLD M8008\n```\n\nExplanation: Yes, it resets OFF once power is stable; remains ON if faults persist."
    },
    {
        "question": "Can M8008 work without backup power?",
        "answer": "Example code:\n```\nLD M8008\n```\n\nExplanation: No, requires UPS or internal protection to detect power-off and handle logic."
    },
    {
        "question": "When does M8009 turn ON?",
        "answer": "Example code:\n```\nLD M8009\nOUT Y0\n```\n\nExplanation: M8009 is ON when external 24V supply is cut off, indicating voltage insufficient."
    },
    {
        "question": "How to monitor external power using M8009?",
        "answer": "Example code:\n```\nLD M8009\nOUT M20\n```\n\nExplanation: If 24V is lost, M20=ON, triggering equipment shutdown or lockout."
    },
    {
        "question": "How does M8009 differ from M8008?",
        "answer": "Example code:\n```\nLD M8008\nLD M8009\n```\n\nExplanation: M8008 detects AC main power; M8009 detects DC 24V loss."
    },
    {
        "question": "Can M8009 be used for emergency response in small systems?",
        "answer": "Example code:\n```\nLD M8009\nOUT Y10\n```\n\nExplanation: Yes, 24V loss triggers Y10 for safety handling."
    },
    {
        "question": "Does M8009 detect isolated supplies?",
        "answer": "Example code:\n```\nLD M8009\n```\n\nExplanation: Ensure signal source syncs with 24V; isolated circuits may need additional detection."
    },
    {
        "question": "What is special about M8011?",
        "answer": "Example code:\n```\nLD M8011\nOUT Y0\n```\n\nExplanation: M8011 toggles ON/OFF at ~10ms intervals for high-frequency pulses."
    },
    {
        "question": "How to generate fast blinking with M8011?",
        "answer": "Example code:\n```\nLD M8011\nOUT Y10\n```\n\nExplanation: Y10 blinks at 10ms intervals, too fast to see, used for testing or high-speed counting."
    },
    {
        "question": "Is M8011 suitable for precise timing?",
        "answer": "Example code:\n```\nLD M8011\nOUT C0\n```\n\nExplanation: Counting may be affected by scan time; use hardware timers for high accuracy."
    },
    {
        "question": "What is the difference between M8011 and M8012?",
        "answer": "Example code:\n```\nLD M8011\nLD M8012\n```\n\nExplanation: M8011 ~10ms cycle, M8012 ~100ms cycle."
    },
    {
        "question": "What if scan time exceeds 10ms?",
        "answer": "Example code:\n```\nLD M8011\n```\n\nExplanation: The bit may toggle multiple times per scan, but only the current state is read, leading to instability."
    },
    {
        "question": "What pulse cycle does M8012 produce?",
        "answer": "Example code:\n```\nLD M8012\nOUT Y0\n```\n\nExplanation: Toggles ON/OFF every ~100ms, used for slower blinking or pulses."
    },
    {
        "question": "Can M8012 drive a test lamp?",
        "answer": "Example code:\n```\nLD M8012\nOUT Y5\n```\n\nExplanation: Y5 blinks at 0.1s intervals, visible to the eye."
    },
    {
        "question": "Compare M8012 with M8004 and M8013?",
        "answer": "Example code:\n```\nLD M8004\nLD M8012\nLD M8013\n```\n\nExplanation: M8004(1s) and M8013(1s) have longer cycles; M8012(100ms) is faster."
    },
    {
        "question": "How to implement a 0.1s counter with M8012?",
        "answer": "Example code:\n```\nLD M8012\nOUT C10\n```\n\nExplanation: C10 increments every 0.1s; 10 counts ≈1s. Accuracy depends on scan time."
    },
    {
        "question": "How to stop M8012 blinking?",
        "answer": "Example code:\n```\nLD M8012\nOUT M20\n```\n\nExplanation: M8012 is built-in and cannot be stopped by program; only PLC stop or power-off stops it."
    },
    {
        "question": "What is the default cycle of M8013 in most models?",
        "answer": "Example code:\n```\nLD M8013\nOUT Y0\n```\n\nExplanation: Typically a 1s ON / 1s OFF pulse for periodic blinking."
    },
    {
        "question": "How to drive a warning lamp with M8013?",
        "answer": "Example code:\n```\nLD M8013\nOUT Y10\n```\n\nExplanation: Y10 blinks at 1s intervals to alert personnel."
    },
    {
        "question": "Can M8013 be used for precise timing?",
        "answer": "Example code:\n```\nLD M8013\nOUT C0\n```\n\nExplanation: Approximate timing; use RTC or timer for higher precision."
    },
    {
        "question": "Can M8012 and M8013 be used together?",
        "answer": "Example code:\n```\nLD M8012\nOUT Y1\nLD M8013\nOUT Y2\n```\n\nExplanation: Yes. Y1 blinks at 0.1s, Y2 at 1s, no conflict."
    },
    {
        "question": "Can you change M8013’s period via program?",
        "answer": "Example code:\n```\nLD M8013\n```\n\nExplanation: No; period is fixed by internal clock and cannot be modified."
    },
    {
        "question": "What is the oscillation period of M8014?",
        "answer": "Example code:\n```\nLD M8014\nOUT Y0\n```\n\nExplanation: Approximately 1-minute ON/OFF cycle, used for long-period indication."
    },
    {
        "question": "How to use M8014 for minute counting?",
        "answer": "Example code:\n```\nLD M8014\nOUT C0\n```\n\nExplanation: Toggles every minute, used for long-duration accumulation."
    },
    {
        "question": "Can M8014 replace the RTC?",
        "answer": "Example code:\n```\nLD M8014\n```\n\nExplanation: Only minute-level toggling, no date/time details; cannot fully replace RTC."
    },
    {
        "question": "Is M8014 suitable for higher frequency timing?",
        "answer": "Example code:\n```\nLD M8014\n```\n\nExplanation: No; use M8012 or M8013 for faster requirements."
    },
    {
        "question": "M8014 may not be implemented on some models?",
        "answer": "Example code:\n```\nLD M8014\n```\n\nExplanation: Yes; check the model manual."
    },
    {
        "question": "What function does M8015 have on some models?",
        "answer": "Example code:\n```\nLD M8015\nOUT Y0\n```\n\nExplanation: Used to disable or preset timers, or as an internal mode flag, depending on the manual."
    },
    {
        "question": "How to pause timers using M8015?",
        "answer": "Example code:\n```\nLD M8015\nAND T0\nOUT Y10\n```\n\nExplanation: When M8015=ON, timers are paused; actual behavior depends on the model."
    },
    {
        "question": "What is M8015’s relation to actual timers?",
        "answer": "Example code:\n```\nLD M8015\n```\n\nExplanation: Can force timers to pause or reset; refer to model documentation."
    },
    {
        "question": "If RST M8015 is used, will timers resume?",
        "answer": "Example code:\n```\nLD X0\nRST M8015\n```\n\nExplanation: May not work if reserved by system; some models allow manual clear."
    },
    {
        "question": "Can M8015 be used as a general bit?",
        "answer": "Example code:\n```\nLD M8015\nOUT M10\n```\n\nExplanation: Not recommended; system-reserved function may cause interference."
    },
    {
        "question": "When does M8016 turn ON?",
        "answer": "Example code:\n```\nLD M8016\nOUT Y0\n```\n\nExplanation: ON while the PLC reads or displays the RTC, pausing updates."
    },
    {
        "question": "How to use M8016 with screen time display?",
        "answer": "Example code:\n```\nLD M8016\nAND M10\nOUT M20\n```\n\nExplanation: M10 may request display; M8016=ON indicates RTC read, pausing screen update."
    },
    {
        "question": "Is M8016 latched?",
        "answer": "Example code:\n```\nLD M8016\nOUT M30\n```\n\nExplanation: Usually a transient state ON during RTC read, then OFF."
    },
    {
        "question": "How to detect when RTC read is complete?",
        "answer": "Example code:\n```\nLDN M8016\nOUT Y5\n```\n\nExplanation: M8016=OFF indicates read complete, resume display or operation."
    },
    {
        "question": "If RTC is unused, does M8016 affect?",
        "answer": "Example code:\n```\nLD M8016\n```\n\nExplanation: No; if RTC is not used, M8016 remains OFF."
    },
    {
        "question": "What is M8017 used for?",
        "answer": "Example code:\n```\nLD M8017\nOUT Y0\n```\n\nExplanation: Adjusts internal RTC by ±30 seconds to correct time drift."
    },
    {
        "question": "How to trigger M8017 for correction?",
        "answer": "Example code:\n```\nLD X0\nSET M8017\n```\n\nExplanation: When X0=ON, M8017=ON, shifting time ±30s as per model."
    },
    {
        "question": "Does M8017 turn OFF after correction?",
        "answer": "Example code:\n```\nLD M8017\n```\n\nExplanation: Most models auto-reset M8017 to OFF after correction."
    },
    {
        "question": "Can M8017 adjust by one minute instead of 30s?",
        "answer": "Example code:\n```\nLD M8017\n```\n\nExplanation: No; use RTC write instructions for larger adjustments."
    },
    {
        "question": "Can RTC read and M8017 correction occur simultaneously?",
        "answer": "Example code:\n```\nLD M8016\nAND M8017\n```\n\nExplanation: Not recommended; pause display (M8016=ON) before correction (M8017)."
    },
    {
        "question": "When does M8018 turn ON?",
        "answer": "Example code:\n```\nLD M8018\nOUT Y0\n```\n\nExplanation: ON when the RTC module or card is detected as inserted."
    },
    {
        "question": "If no RTC card is inserted, what is M8018?",
        "answer": "Example code:\n```\nLD M8018\n```\n\nExplanation: M8018=OFF, indicating no RTC module or connection error."
    },
    {
        "question": "How to protect RTC operations using M8018?",
        "answer": "Example code:\n```\nLD M8018\nAND X0\nOUT M10\n```\n\nExplanation: Only when RTC module is present (M8018=ON) and X0=ON does RTC read/write occur."
    },
    {
        "question": "Can M8018 signal card removal?",
        "answer": "Example code:\n```\nLDN M8018\nOUT Y5\n```\n\nExplanation: M8018=OFF triggers Y5 warning for card absence."
    },
    {
        "question": "Does M8018 update immediately on card change?",
        "answer": "Example code:\n```\nLD M8018\n```\n\nExplanation: Yes; hardware detection updates M8018 on insertion/removal."
    },
    {
        "question": "When does M8019 turn ON?",
        "answer": "Example code:\n```\nLD M8019\nOUT Y0\n```\n\nExplanation: ON when the RTC experiences errors or read/write failures."
    },
    {
        "question": "What is the relationship between M8019 and M8018?",
        "answer": "Example code:\n```\nLD M8018\nLD M8019\n```\n\nExplanation: M8018 indicates module presence; M8019 indicates RTC errors. They operate independently."
    },
    {
        "question": "What actions on RTC error?",
        "answer": "Example code:\n```\nLD M8019\nOUT Y10  // Warning lamp\nMOV K0 D500  // Reset time registers\n```\n\nExplanation: Alert operator and attempt reinitialization."
    },
    {
        "question": "Does M8019 reset OFF automatically?",
        "answer": "Example code:\n```\nLD M8019\n```\n\nExplanation: Resets OFF after error is cleared and RTC reinitialized."
    },
    {
        "question": "How to prevent frequent RTC errors?",
        "answer": "Example code:\n```\nLD M8019\n```\n\nExplanation: Ensure stable battery voltage, proper module connection, and correct RTC handling."
    }
]